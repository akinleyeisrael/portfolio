/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/easymde";
exports.ids = ["vendor-chunks/easymde"];
exports.modules = {

/***/ "(ssr)/./node_modules/easymde/src/js/codemirror/tablist.js":
/*!***********************************************************!*\
  !*** ./node_modules/easymde/src/js/codemirror/tablist.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\nvar CodeMirror = __webpack_require__(/*! codemirror */ \"(ssr)/./node_modules/codemirror/lib/codemirror.js\");\n\nCodeMirror.commands.tabAndIndentMarkdownList = function (cm) {\n    var ranges = cm.listSelections();\n    var pos = ranges[0].head;\n    var eolState = cm.getStateAfter(pos.line);\n    var inList = eolState.list !== false;\n\n    if (inList) {\n        cm.execCommand('indentMore');\n        return;\n    }\n\n    if (cm.options.indentWithTabs) {\n        cm.execCommand('insertTab');\n    } else {\n        var spaces = Array(cm.options.tabSize + 1).join(' ');\n        cm.replaceSelection(spaces);\n    }\n};\n\nCodeMirror.commands.shiftTabAndUnindentMarkdownList = function (cm) {\n    var ranges = cm.listSelections();\n    var pos = ranges[0].head;\n    var eolState = cm.getStateAfter(pos.line);\n    var inList = eolState.list !== false;\n\n    if (inList) {\n        cm.execCommand('indentLess');\n        return;\n    }\n\n    if (cm.options.indentWithTabs) {\n        cm.execCommand('insertTab');\n    } else {\n        var spaces = Array(cm.options.tabSize + 1).join(' ');\n        cm.replaceSelection(spaces);\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZWFzeW1kZS9zcmMvanMvY29kZW1pcnJvci90YWJsaXN0LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7O0FBRUEsaUJBQWlCLG1CQUFPLENBQUMscUVBQVk7O0FBRXJDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0LWFwcC8uL25vZGVfbW9kdWxlcy9lYXN5bWRlL3NyYy9qcy9jb2RlbWlycm9yL3RhYmxpc3QuanM/ZGJmMiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb2RlTWlycm9yLCBjb3B5cmlnaHQgKGMpIGJ5IE1hcmlqbiBIYXZlcmJla2UgYW5kIG90aGVyc1xuLy8gRGlzdHJpYnV0ZWQgdW5kZXIgYW4gTUlUIGxpY2Vuc2U6IGh0dHA6Ly9jb2RlbWlycm9yLm5ldC9MSUNFTlNFXG5cbnZhciBDb2RlTWlycm9yID0gcmVxdWlyZSgnY29kZW1pcnJvcicpO1xuXG5Db2RlTWlycm9yLmNvbW1hbmRzLnRhYkFuZEluZGVudE1hcmtkb3duTGlzdCA9IGZ1bmN0aW9uIChjbSkge1xuICAgIHZhciByYW5nZXMgPSBjbS5saXN0U2VsZWN0aW9ucygpO1xuICAgIHZhciBwb3MgPSByYW5nZXNbMF0uaGVhZDtcbiAgICB2YXIgZW9sU3RhdGUgPSBjbS5nZXRTdGF0ZUFmdGVyKHBvcy5saW5lKTtcbiAgICB2YXIgaW5MaXN0ID0gZW9sU3RhdGUubGlzdCAhPT0gZmFsc2U7XG5cbiAgICBpZiAoaW5MaXN0KSB7XG4gICAgICAgIGNtLmV4ZWNDb21tYW5kKCdpbmRlbnRNb3JlJyk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoY20ub3B0aW9ucy5pbmRlbnRXaXRoVGFicykge1xuICAgICAgICBjbS5leGVjQ29tbWFuZCgnaW5zZXJ0VGFiJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHNwYWNlcyA9IEFycmF5KGNtLm9wdGlvbnMudGFiU2l6ZSArIDEpLmpvaW4oJyAnKTtcbiAgICAgICAgY20ucmVwbGFjZVNlbGVjdGlvbihzcGFjZXMpO1xuICAgIH1cbn07XG5cbkNvZGVNaXJyb3IuY29tbWFuZHMuc2hpZnRUYWJBbmRVbmluZGVudE1hcmtkb3duTGlzdCA9IGZ1bmN0aW9uIChjbSkge1xuICAgIHZhciByYW5nZXMgPSBjbS5saXN0U2VsZWN0aW9ucygpO1xuICAgIHZhciBwb3MgPSByYW5nZXNbMF0uaGVhZDtcbiAgICB2YXIgZW9sU3RhdGUgPSBjbS5nZXRTdGF0ZUFmdGVyKHBvcy5saW5lKTtcbiAgICB2YXIgaW5MaXN0ID0gZW9sU3RhdGUubGlzdCAhPT0gZmFsc2U7XG5cbiAgICBpZiAoaW5MaXN0KSB7XG4gICAgICAgIGNtLmV4ZWNDb21tYW5kKCdpbmRlbnRMZXNzJyk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoY20ub3B0aW9ucy5pbmRlbnRXaXRoVGFicykge1xuICAgICAgICBjbS5leGVjQ29tbWFuZCgnaW5zZXJ0VGFiJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHNwYWNlcyA9IEFycmF5KGNtLm9wdGlvbnMudGFiU2l6ZSArIDEpLmpvaW4oJyAnKTtcbiAgICAgICAgY20ucmVwbGFjZVNlbGVjdGlvbihzcGFjZXMpO1xuICAgIH1cbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/easymde/src/js/codemirror/tablist.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/easymde/src/js/easymde.js":
/*!************************************************!*\
  !*** ./node_modules/easymde/src/js/easymde.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nvar CodeMirror = __webpack_require__(/*! codemirror */ \"(ssr)/./node_modules/codemirror/lib/codemirror.js\");\n__webpack_require__(/*! codemirror/addon/edit/continuelist.js */ \"(ssr)/./node_modules/codemirror/addon/edit/continuelist.js\");\n__webpack_require__(/*! ./codemirror/tablist */ \"(ssr)/./node_modules/easymde/src/js/codemirror/tablist.js\");\n__webpack_require__(/*! codemirror/addon/display/fullscreen.js */ \"(ssr)/./node_modules/codemirror/addon/display/fullscreen.js\");\n__webpack_require__(/*! codemirror/mode/markdown/markdown.js */ \"(ssr)/./node_modules/codemirror/mode/markdown/markdown.js\");\n__webpack_require__(/*! codemirror/addon/mode/overlay.js */ \"(ssr)/./node_modules/codemirror/addon/mode/overlay.js\");\n__webpack_require__(/*! codemirror/addon/display/placeholder.js */ \"(ssr)/./node_modules/codemirror/addon/display/placeholder.js\");\n__webpack_require__(/*! codemirror/addon/display/autorefresh.js */ \"(ssr)/./node_modules/codemirror/addon/display/autorefresh.js\");\n__webpack_require__(/*! codemirror/addon/selection/mark-selection.js */ \"(ssr)/./node_modules/codemirror/addon/selection/mark-selection.js\");\n__webpack_require__(/*! codemirror/addon/search/searchcursor.js */ \"(ssr)/./node_modules/codemirror/addon/search/searchcursor.js\");\n__webpack_require__(/*! codemirror/mode/gfm/gfm.js */ \"(ssr)/./node_modules/codemirror/mode/gfm/gfm.js\");\n__webpack_require__(/*! codemirror/mode/xml/xml.js */ \"(ssr)/./node_modules/codemirror/mode/xml/xml.js\");\nvar CodeMirrorSpellChecker = __webpack_require__(/*! codemirror-spell-checker */ \"(ssr)/./node_modules/codemirror-spell-checker/src/js/spell-checker.js\");\nvar marked = (__webpack_require__(/*! marked */ \"(ssr)/./node_modules/marked/lib/marked.cjs\").marked);\n\n\n// Some variables\nvar isMac = /Mac/.test(navigator.platform);\nvar anchorToExternalRegex = new RegExp(/(<a.*?https?:\\/\\/.*?[^a]>)+?/g);\n\n// Mapping of actions that can be bound to keyboard shortcuts or toolbar buttons\nvar bindings = {\n    'toggleBold': toggleBold,\n    'toggleItalic': toggleItalic,\n    'drawLink': drawLink,\n    'toggleHeadingSmaller': toggleHeadingSmaller,\n    'toggleHeadingBigger': toggleHeadingBigger,\n    'drawImage': drawImage,\n    'toggleBlockquote': toggleBlockquote,\n    'toggleOrderedList': toggleOrderedList,\n    'toggleUnorderedList': toggleUnorderedList,\n    'toggleCodeBlock': toggleCodeBlock,\n    'togglePreview': togglePreview,\n    'toggleStrikethrough': toggleStrikethrough,\n    'toggleHeading1': toggleHeading1,\n    'toggleHeading2': toggleHeading2,\n    'toggleHeading3': toggleHeading3,\n    'toggleHeading4': toggleHeading4,\n    'toggleHeading5': toggleHeading5,\n    'toggleHeading6': toggleHeading6,\n    'cleanBlock': cleanBlock,\n    'drawTable': drawTable,\n    'drawHorizontalRule': drawHorizontalRule,\n    'undo': undo,\n    'redo': redo,\n    'toggleSideBySide': toggleSideBySide,\n    'toggleFullScreen': toggleFullScreen,\n};\n\nvar shortcuts = {\n    'toggleBold': 'Cmd-B',\n    'toggleItalic': 'Cmd-I',\n    'drawLink': 'Cmd-K',\n    'toggleHeadingSmaller': 'Cmd-H',\n    'toggleHeadingBigger': 'Shift-Cmd-H',\n    'toggleHeading1': 'Ctrl+Alt+1',\n    'toggleHeading2': 'Ctrl+Alt+2',\n    'toggleHeading3': 'Ctrl+Alt+3',\n    'toggleHeading4': 'Ctrl+Alt+4',\n    'toggleHeading5': 'Ctrl+Alt+5',\n    'toggleHeading6': 'Ctrl+Alt+6',\n    'cleanBlock': 'Cmd-E',\n    'drawImage': 'Cmd-Alt-I',\n    'toggleBlockquote': 'Cmd-\\'',\n    'toggleOrderedList': 'Cmd-Alt-L',\n    'toggleUnorderedList': 'Cmd-L',\n    'toggleCodeBlock': 'Cmd-Alt-C',\n    'togglePreview': 'Cmd-P',\n    'toggleSideBySide': 'F9',\n    'toggleFullScreen': 'F11',\n};\n\nvar getBindingName = function (f) {\n    for (var key in bindings) {\n        if (bindings[key] === f) {\n            return key;\n        }\n    }\n    return null;\n};\n\nvar isMobile = function () {\n    var check = false;\n    (function (a) {\n        if (/(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(a) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw-(n|u)|c55\\/|capi|ccwa|cdm-|cell|chtm|cldc|cmd-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc-s|devi|dica|dmob|do(c|p)o|ds(12|-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(-|_)|g1 u|g560|gene|gf-5|g-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd-(m|p|t)|hei-|hi(pt|ta)|hp( i|ip)|hs-c|ht(c(-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i-(20|go|ma)|i230|iac( |-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|-[a-w])|libw|lynx|m1-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|-([1-8]|c))|phil|pire|pl(ay|uc)|pn-2|po(ck|rt|se)|prox|psio|pt-g|qa-a|qc(07|12|21|32|60|-[2-7]|i-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h-|oo|p-)|sdk\\/|se(c(-|0|1)|47|mc|nd|ri)|sgh-|shar|sie(-|m)|sk-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h-|v-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl-|tdg-|tel(i|m)|tim-|t-mo|to(pl|sh)|ts(70|m-|m3|m5)|tx-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas-|your|zeto|zte-/i.test(a.substr(0, 4))) check = true;\n    })(navigator.userAgent || navigator.vendor || window.opera);\n    return check;\n};\n\n/**\n * Modify HTML to add 'target=\"_blank\"' to links so they open in new tabs by default.\n * @param {string} htmlText - HTML to be modified.\n * @return {string} The modified HTML text.\n */\nfunction addAnchorTargetBlank(htmlText) {\n    var match;\n    while ((match = anchorToExternalRegex.exec(htmlText)) !== null) {\n        // With only one capture group in the RegExp, we can safely take the first index from the match.\n        var linkString = match[0];\n\n        if (linkString.indexOf('target=') === -1) {\n            var fixedLinkString = linkString.replace(/>$/, ' target=\"_blank\">');\n            htmlText = htmlText.replace(linkString, fixedLinkString);\n        }\n    }\n    return htmlText;\n}\n\n/**\n * Modify HTML to remove the list-style when rendering checkboxes.\n * @param {string} htmlText - HTML to be modified.\n * @return {string} The modified HTML text.\n */\nfunction removeListStyleWhenCheckbox(htmlText) {\n\n    var parser = new DOMParser();\n    var htmlDoc = parser.parseFromString(htmlText, 'text/html');\n    var listItems = htmlDoc.getElementsByTagName('li');\n\n    for (var i = 0; i < listItems.length; i++) {\n        var listItem = listItems[i];\n\n        for (var j = 0; j < listItem.children.length; j++) {\n            var listItemChild = listItem.children[j];\n\n            if (listItemChild instanceof HTMLInputElement && listItemChild.type === 'checkbox') {\n                // From Github: margin: 0 .2em .25em -1.6em;\n                listItem.style.marginLeft = '-1.5em';\n                listItem.style.listStyleType = 'none';\n            }\n        }\n    }\n\n    return htmlDoc.documentElement.innerHTML;\n}\n\n/**\n * Fix shortcut. Mac use Command, others use Ctrl.\n */\nfunction fixShortcut(name) {\n    if (isMac) {\n        name = name.replace('Ctrl', 'Cmd');\n    } else {\n        name = name.replace('Cmd', 'Ctrl');\n    }\n    return name;\n}\n\n/**\n * Create dropdown block\n */\nfunction createToolbarDropdown(options, enableTooltips, shortcuts, parent) {\n    var el = createToolbarButton(options, false, enableTooltips, shortcuts, 'button', parent);\n    el.classList.add('easymde-dropdown');\n\n    el.onclick = function () {\n        el.focus();\n    };\n\n    var content = document.createElement('div');\n    content.className = 'easymde-dropdown-content';\n    for (var childrenIndex = 0; childrenIndex < options.children.length; childrenIndex++) {\n\n        var child = options.children[childrenIndex];\n        var childElement;\n\n        if (typeof child === 'string' && child in toolbarBuiltInButtons) {\n            childElement = createToolbarButton(toolbarBuiltInButtons[child], true, enableTooltips, shortcuts, 'button', parent);\n        } else {\n            childElement = createToolbarButton(child, true, enableTooltips, shortcuts, 'button', parent);\n        }\n\n        childElement.addEventListener('click', function (e) { e.stopPropagation(); }, false);\n        content.appendChild(childElement);\n    }\n    el.appendChild(content);\n    return el;\n}\n\n/**\n * Create button element for toolbar.\n */\nfunction createToolbarButton(options, enableActions, enableTooltips, shortcuts, markup, parent) {\n    options = options || {};\n    var el = document.createElement(markup);\n\n    // Add 'custom' attributes as early as possible, so that 'official' attributes will never be overwritten.\n    if (options.attributes) {\n        for (var attribute in options.attributes) {\n            if (Object.prototype.hasOwnProperty.call(options.attributes, attribute)) {\n                el.setAttribute(attribute, options.attributes[attribute]);\n            }\n        }\n    }\n\n    var classNamePrefix = parent.options.toolbarButtonClassPrefix ? parent.options.toolbarButtonClassPrefix + '-' : '';\n    el.className = classNamePrefix + options.name;\n    el.setAttribute('type', markup);\n    enableTooltips = (enableTooltips == undefined) ? true : enableTooltips;\n\n    if (options.text) {\n        el.innerText = options.text;\n    }\n\n    // Properly handle custom shortcuts\n    if (options.name && options.name in shortcuts) {\n        bindings[options.name] = options.action;\n    }\n\n    if (options.title && enableTooltips) {\n        el.title = createTooltip(options.title, options.action, shortcuts);\n\n        if (isMac) {\n            el.title = el.title.replace('Ctrl', '⌘');\n            el.title = el.title.replace('Alt', '⌥');\n        }\n    }\n\n    if (options.title) {\n        el.setAttribute('aria-label', options.title);\n    }\n\n    if (options.noDisable) {\n        el.classList.add('no-disable');\n    }\n\n    if (options.noMobile) {\n        el.classList.add('no-mobile');\n    }\n\n    // Prevent errors if there is no class name in custom options\n    var classNameParts = [];\n    if (typeof options.className !== 'undefined') {\n        classNameParts = options.className.split(' ');\n    }\n\n    // Provide backwards compatibility with simple-markdown-editor by adding custom classes to the button.\n    var iconClasses = [];\n    for (var classNameIndex = 0; classNameIndex < classNameParts.length; classNameIndex++) {\n        var classNamePart = classNameParts[classNameIndex];\n        // Split icon classes from the button.\n        // Regex will detect \"fa\", \"fas\", \"fa-something\" and \"fa-some-icon-1\", but not \"fanfare\".\n        if (classNamePart.match(/^fa([srlb]|(-[\\w-]*)|$)/)) {\n            iconClasses.push(classNamePart);\n        } else {\n            el.classList.add(classNamePart);\n        }\n    }\n\n    el.tabIndex = -1;\n\n    if (iconClasses.length > 0) {\n        // Create icon element and append as a child to the button\n        var icon = document.createElement('i');\n        for (var iconClassIndex = 0; iconClassIndex < iconClasses.length; iconClassIndex++) {\n            var iconClass = iconClasses[iconClassIndex];\n            icon.classList.add(iconClass);\n        }\n        el.appendChild(icon);\n    }\n\n    // If there is a custom icon markup set, use that\n    if (typeof options.icon !== 'undefined') {\n        el.innerHTML = options.icon;\n    }\n\n    if (options.action && enableActions) {\n        if (typeof options.action === 'function') {\n            el.onclick = function (e) {\n                e.preventDefault();\n                options.action(parent);\n            };\n        } else if (typeof options.action === 'string') {\n            el.onclick = function (e) {\n                e.preventDefault();\n                window.open(options.action, '_blank');\n            };\n        }\n    }\n\n    return el;\n}\n\nfunction createSep() {\n    var el = document.createElement('i');\n    el.className = 'separator';\n    el.innerHTML = '|';\n    return el;\n}\n\nfunction createTooltip(title, action, shortcuts) {\n    var actionName;\n    var tooltip = title;\n\n    if (action) {\n        actionName = getBindingName(action);\n        if (shortcuts[actionName]) {\n            tooltip += ' (' + fixShortcut(shortcuts[actionName]) + ')';\n        }\n    }\n\n    return tooltip;\n}\n\n/**\n * The state of CodeMirror at the given position.\n */\nfunction getState(cm, pos) {\n    pos = pos || cm.getCursor('start');\n    var stat = cm.getTokenAt(pos);\n    if (!stat.type) return {};\n\n    var types = stat.type.split(' ');\n\n    var ret = {},\n        data, text;\n    for (var i = 0; i < types.length; i++) {\n        data = types[i];\n        if (data === 'strong') {\n            ret.bold = true;\n        } else if (data === 'variable-2') {\n            text = cm.getLine(pos.line);\n            if (/^\\s*\\d+\\.\\s/.test(text)) {\n                ret['ordered-list'] = true;\n            } else {\n                ret['unordered-list'] = true;\n            }\n        } else if (data === 'atom') {\n            ret.quote = true;\n        } else if (data === 'em') {\n            ret.italic = true;\n        } else if (data === 'quote') {\n            ret.quote = true;\n        } else if (data === 'strikethrough') {\n            ret.strikethrough = true;\n        } else if (data === 'comment') {\n            ret.code = true;\n        } else if (data === 'link' && !ret.image) {\n            ret.link = true;\n        } else if (data === 'image') {\n            ret.image = true;\n        } else if (data.match(/^header(-[1-6])?$/)) {\n            ret[data.replace('header', 'heading')] = true;\n        }\n    }\n    return ret;\n}\n\n\n// Saved overflow setting\nvar saved_overflow = '';\n\n/**\n * Toggle full screen of the editor.\n * @param {EasyMDE} editor\n */\nfunction toggleFullScreen(editor) {\n    // Set fullscreen\n    var cm = editor.codemirror;\n    cm.setOption('fullScreen', !cm.getOption('fullScreen'));\n\n\n    // Prevent scrolling on body during fullscreen active\n    if (cm.getOption('fullScreen')) {\n        saved_overflow = document.body.style.overflow;\n        document.body.style.overflow = 'hidden';\n    } else {\n        document.body.style.overflow = saved_overflow;\n    }\n\n    var wrapper = cm.getWrapperElement();\n    var sidebyside = wrapper.nextSibling;\n\n    if (sidebyside.classList.contains('editor-preview-active-side')) {\n        if (editor.options.sideBySideFullscreen === false) {\n            // if side-by-side not-fullscreen ok, apply classes as needed\n            var easyMDEContainer = wrapper.parentNode;\n            if (cm.getOption('fullScreen')) {\n                easyMDEContainer.classList.remove('sided--no-fullscreen');\n            } else {\n                easyMDEContainer.classList.add('sided--no-fullscreen');\n            }\n        } else {\n            toggleSideBySide(editor);\n        }\n    }\n\n    if (editor.options.onToggleFullScreen) {\n        editor.options.onToggleFullScreen(cm.getOption('fullScreen') || false);\n    }\n\n    // Remove or set maxHeight\n    if (typeof editor.options.maxHeight !== 'undefined') {\n        if (cm.getOption('fullScreen')) {\n            cm.getScrollerElement().style.removeProperty('height');\n            sidebyside.style.removeProperty('height');\n        } else {\n            cm.getScrollerElement().style.height = editor.options.maxHeight;\n            editor.setPreviewMaxHeight();\n        }\n    }\n\n    // Update toolbar class\n    editor.toolbar_div.classList.toggle('fullscreen');\n\n    // Update toolbar button\n    if (editor.toolbarElements && editor.toolbarElements.fullscreen) {\n        var toolbarButton = editor.toolbarElements.fullscreen;\n        toolbarButton.classList.toggle('active');\n    }\n}\n\n\n/**\n * Action for toggling bold.\n * @param {EasyMDE} editor\n */\nfunction toggleBold(editor) {\n    _toggleBlock(editor, 'bold', editor.options.blockStyles.bold);\n}\n\n\n/**\n * Action for toggling italic.\n * @param {EasyMDE} editor\n */\nfunction toggleItalic(editor) {\n    _toggleBlock(editor, 'italic', editor.options.blockStyles.italic);\n}\n\n\n/**\n * Action for toggling strikethrough.\n * @param {EasyMDE} editor\n */\nfunction toggleStrikethrough(editor) {\n    _toggleBlock(editor, 'strikethrough', '~~');\n}\n\n/**\n * Action for toggling code block.\n * @param {EasyMDE} editor\n */\nfunction toggleCodeBlock(editor) {\n    var fenceCharsToInsert = editor.options.blockStyles.code;\n\n    function fencing_line(line) {\n        /* return true, if this is a ``` or ~~~ line */\n        if (typeof line !== 'object') {\n            throw 'fencing_line() takes a \\'line\\' object (not a line number, or line text).  Got: ' + typeof line + ': ' + line;\n        }\n        return line.styles && line.styles[2] && line.styles[2].indexOf('formatting-code-block') !== -1;\n    }\n\n    function token_state(token) {\n        // base goes an extra level deep when mode backdrops are used, e.g. spellchecker on\n        return token.state.base.base || token.state.base;\n    }\n\n    function code_type(cm, line_num, line, firstTok, lastTok) {\n        /*\n         * Return \"single\", \"indented\", \"fenced\" or false\n         *\n         * cm and line_num are required.  Others are optional for efficiency\n         *   To check in the middle of a line, pass in firstTok yourself.\n         */\n        line = line || cm.getLineHandle(line_num);\n        firstTok = firstTok || cm.getTokenAt({\n            line: line_num,\n            ch: 1,\n        });\n        lastTok = lastTok || (!!line.text && cm.getTokenAt({\n            line: line_num,\n            ch: line.text.length - 1,\n        }));\n        var types = firstTok.type ? firstTok.type.split(' ') : [];\n        if (lastTok && token_state(lastTok).indentedCode) {\n            // have to check last char, since first chars of first line aren\"t marked as indented\n            return 'indented';\n        } else if (types.indexOf('comment') === -1) {\n            // has to be after \"indented\" check, since first chars of first indented line aren\"t marked as such\n            return false;\n        } else if (token_state(firstTok).fencedChars || token_state(lastTok).fencedChars || fencing_line(line)) {\n            return 'fenced';\n        } else {\n            return 'single';\n        }\n    }\n\n    function insertFencingAtSelection(cm, cur_start, cur_end, fenceCharsToInsert) {\n        var start_line_sel = cur_start.line + 1,\n            end_line_sel = cur_end.line + 1,\n            sel_multi = cur_start.line !== cur_end.line,\n            repl_start = fenceCharsToInsert + '\\n',\n            repl_end = '\\n' + fenceCharsToInsert;\n        if (sel_multi) {\n            end_line_sel++;\n        }\n        // handle last char including \\n or not\n        if (sel_multi && cur_end.ch === 0) {\n            repl_end = fenceCharsToInsert + '\\n';\n            end_line_sel--;\n        }\n        _replaceSelection(cm, false, [repl_start, repl_end]);\n        cm.setSelection({\n            line: start_line_sel,\n            ch: 0,\n        }, {\n            line: end_line_sel,\n            ch: 0,\n        });\n    }\n\n    var cm = editor.codemirror,\n        cur_start = cm.getCursor('start'),\n        cur_end = cm.getCursor('end'),\n        tok = cm.getTokenAt({\n            line: cur_start.line,\n            ch: cur_start.ch || 1,\n        }), // avoid ch 0 which is a cursor pos but not token\n        line = cm.getLineHandle(cur_start.line),\n        is_code = code_type(cm, cur_start.line, line, tok);\n    var block_start, block_end, lineCount;\n\n    if (is_code === 'single') {\n        // similar to some EasyMDE _toggleBlock logic\n        var start = line.text.slice(0, cur_start.ch).replace('`', ''),\n            end = line.text.slice(cur_start.ch).replace('`', '');\n        cm.replaceRange(start + end, {\n            line: cur_start.line,\n            ch: 0,\n        }, {\n            line: cur_start.line,\n            ch: 99999999999999,\n        });\n        cur_start.ch--;\n        if (cur_start !== cur_end) {\n            cur_end.ch--;\n        }\n        cm.setSelection(cur_start, cur_end);\n        cm.focus();\n    } else if (is_code === 'fenced') {\n        if (cur_start.line !== cur_end.line || cur_start.ch !== cur_end.ch) {\n            // use selection\n\n            // find the fenced line so we know what type it is (tilde, backticks, number of them)\n            for (block_start = cur_start.line; block_start >= 0; block_start--) {\n                line = cm.getLineHandle(block_start);\n                if (fencing_line(line)) {\n                    break;\n                }\n            }\n            var fencedTok = cm.getTokenAt({\n                line: block_start,\n                ch: 1,\n            });\n            var fence_chars = token_state(fencedTok).fencedChars;\n            var start_text, start_line;\n            var end_text, end_line;\n            // check for selection going up against fenced lines, in which case we don't want to add more fencing\n            if (fencing_line(cm.getLineHandle(cur_start.line))) {\n                start_text = '';\n                start_line = cur_start.line;\n            } else if (fencing_line(cm.getLineHandle(cur_start.line - 1))) {\n                start_text = '';\n                start_line = cur_start.line - 1;\n            } else {\n                start_text = fence_chars + '\\n';\n                start_line = cur_start.line;\n            }\n            if (fencing_line(cm.getLineHandle(cur_end.line))) {\n                end_text = '';\n                end_line = cur_end.line;\n                if (cur_end.ch === 0) {\n                    end_line += 1;\n                }\n            } else if (cur_end.ch !== 0 && fencing_line(cm.getLineHandle(cur_end.line + 1))) {\n                end_text = '';\n                end_line = cur_end.line + 1;\n            } else {\n                end_text = fence_chars + '\\n';\n                end_line = cur_end.line + 1;\n            }\n            if (cur_end.ch === 0) {\n                // full last line selected, putting cursor at beginning of next\n                end_line -= 1;\n            }\n            cm.operation(function () {\n                // end line first, so that line numbers don't change\n                cm.replaceRange(end_text, {\n                    line: end_line,\n                    ch: 0,\n                }, {\n                    line: end_line + (end_text ? 0 : 1),\n                    ch: 0,\n                });\n                cm.replaceRange(start_text, {\n                    line: start_line,\n                    ch: 0,\n                }, {\n                    line: start_line + (start_text ? 0 : 1),\n                    ch: 0,\n                });\n            });\n            cm.setSelection({\n                line: start_line + (start_text ? 1 : 0),\n                ch: 0,\n            }, {\n                line: end_line + (start_text ? 1 : -1),\n                ch: 0,\n            });\n            cm.focus();\n        } else {\n            // no selection, search for ends of this fenced block\n            var search_from = cur_start.line;\n            if (fencing_line(cm.getLineHandle(cur_start.line))) { // gets a little tricky if cursor is right on a fenced line\n                if (code_type(cm, cur_start.line + 1) === 'fenced') {\n                    block_start = cur_start.line;\n                    search_from = cur_start.line + 1; // for searching for \"end\"\n                } else {\n                    block_end = cur_start.line;\n                    search_from = cur_start.line - 1; // for searching for \"start\"\n                }\n            }\n            if (block_start === undefined) {\n                for (block_start = search_from; block_start >= 0; block_start--) {\n                    line = cm.getLineHandle(block_start);\n                    if (fencing_line(line)) {\n                        break;\n                    }\n                }\n            }\n            if (block_end === undefined) {\n                lineCount = cm.lineCount();\n                for (block_end = search_from; block_end < lineCount; block_end++) {\n                    line = cm.getLineHandle(block_end);\n                    if (fencing_line(line)) {\n                        break;\n                    }\n                }\n            }\n            cm.operation(function () {\n                cm.replaceRange('', {\n                    line: block_start,\n                    ch: 0,\n                }, {\n                    line: block_start + 1,\n                    ch: 0,\n                });\n                cm.replaceRange('', {\n                    line: block_end - 1,\n                    ch: 0,\n                }, {\n                    line: block_end,\n                    ch: 0,\n                });\n            });\n            cm.focus();\n        }\n    } else if (is_code === 'indented') {\n        if (cur_start.line !== cur_end.line || cur_start.ch !== cur_end.ch) {\n            // use selection\n            block_start = cur_start.line;\n            block_end = cur_end.line;\n            if (cur_end.ch === 0) {\n                block_end--;\n            }\n        } else {\n            // no selection, search for ends of this indented block\n            for (block_start = cur_start.line; block_start >= 0; block_start--) {\n                line = cm.getLineHandle(block_start);\n                if (line.text.match(/^\\s*$/)) {\n                    // empty or all whitespace - keep going\n                    continue;\n                } else {\n                    if (code_type(cm, block_start, line) !== 'indented') {\n                        block_start += 1;\n                        break;\n                    }\n                }\n            }\n            lineCount = cm.lineCount();\n            for (block_end = cur_start.line; block_end < lineCount; block_end++) {\n                line = cm.getLineHandle(block_end);\n                if (line.text.match(/^\\s*$/)) {\n                    // empty or all whitespace - keep going\n                    continue;\n                } else {\n                    if (code_type(cm, block_end, line) !== 'indented') {\n                        block_end -= 1;\n                        break;\n                    }\n                }\n            }\n        }\n        // if we are going to un-indent based on a selected set of lines, and the next line is indented too, we need to\n        // insert a blank line so that the next line(s) continue to be indented code\n        var next_line = cm.getLineHandle(block_end + 1),\n            next_line_last_tok = next_line && cm.getTokenAt({\n                line: block_end + 1,\n                ch: next_line.text.length - 1,\n            }),\n            next_line_indented = next_line_last_tok && token_state(next_line_last_tok).indentedCode;\n        if (next_line_indented) {\n            cm.replaceRange('\\n', {\n                line: block_end + 1,\n                ch: 0,\n            });\n        }\n\n        for (var i = block_start; i <= block_end; i++) {\n            cm.indentLine(i, 'subtract'); // TODO: this doesn't get tracked in the history, so can't be undone :(\n        }\n        cm.focus();\n    } else {\n        // insert code formatting\n        var no_sel_and_starting_of_line = (cur_start.line === cur_end.line && cur_start.ch === cur_end.ch && cur_start.ch === 0);\n        var sel_multi = cur_start.line !== cur_end.line;\n        if (no_sel_and_starting_of_line || sel_multi) {\n            insertFencingAtSelection(cm, cur_start, cur_end, fenceCharsToInsert);\n        } else {\n            _replaceSelection(cm, false, ['`', '`']);\n        }\n    }\n}\n\n/**\n * Action for toggling blockquote.\n */\nfunction toggleBlockquote(editor) {\n    _toggleLine(editor.codemirror, 'quote');\n}\n\n/**\n * Action for toggling heading size: normal -> h1 -> h2 -> h3 -> h4 -> h5 -> h6 -> normal\n */\nfunction toggleHeadingSmaller(editor) {\n    _toggleHeading(editor.codemirror, 'smaller');\n}\n\n/**\n * Action for toggling heading size: normal -> h6 -> h5 -> h4 -> h3 -> h2 -> h1 -> normal\n */\nfunction toggleHeadingBigger(editor) {\n    _toggleHeading(editor.codemirror, 'bigger');\n}\n\n/**\n * Action for toggling heading size 1\n */\nfunction toggleHeading1(editor) {\n    _toggleHeading(editor.codemirror, undefined, 1);\n}\n\n/**\n * Action for toggling heading size 2\n */\nfunction toggleHeading2(editor) {\n    _toggleHeading(editor.codemirror, undefined, 2);\n}\n\n/**\n * Action for toggling heading size 3\n */\nfunction toggleHeading3(editor) {\n    _toggleHeading(editor.codemirror, undefined, 3);\n}\n\n/**\n * Action for toggling heading size 4\n */\nfunction toggleHeading4(editor) {\n    _toggleHeading(editor.codemirror, undefined, 4);\n}\n\n/**\n * Action for toggling heading size 5\n */\nfunction toggleHeading5(editor) {\n    _toggleHeading(editor.codemirror, undefined, 5);\n}\n\n/**\n * Action for toggling heading size 6\n */\nfunction toggleHeading6(editor) {\n    _toggleHeading(editor.codemirror, undefined, 6);\n}\n\n\n/**\n * Action for toggling ul.\n */\nfunction toggleUnorderedList(editor) {\n    var cm = editor.codemirror;\n\n    var listStyle = '*'; // Default\n    if (['-', '+', '*'].includes(editor.options.unorderedListStyle)) {\n        listStyle = editor.options.unorderedListStyle;\n    }\n\n    _toggleLine(cm, 'unordered-list', listStyle);\n}\n\n\n/**\n * Action for toggling ol.\n */\nfunction toggleOrderedList(editor) {\n    _toggleLine(editor.codemirror, 'ordered-list');\n}\n\n/**\n * Action for clean block (remove headline, list, blockquote code, markers)\n */\nfunction cleanBlock(editor) {\n    _cleanBlock(editor.codemirror);\n}\n\n/**\n * Action for drawing a link.\n * @param {EasyMDE} editor\n */\nfunction drawLink(editor) {\n    var options = editor.options;\n    var url = 'https://';\n    if (options.promptURLs) {\n        var result = prompt(options.promptTexts.link, url);\n        if (!result) {\n            return false;\n        }\n        url = escapePromptURL(result);\n    }\n    _toggleLink(editor, 'link', options.insertTexts.link, url);\n}\n\n/**\n * Action for drawing an img.\n * @param {EasyMDE} editor\n */\nfunction drawImage(editor) {\n    var options = editor.options;\n    var url = 'https://';\n    if (options.promptURLs) {\n        var result = prompt(options.promptTexts.image, url);\n        if (!result) {\n            return false;\n        }\n        url = escapePromptURL(result);\n    }\n    _toggleLink(editor, 'image', options.insertTexts.image, url);\n}\n\n/**\n * Encode and escape URLs to prevent breaking up rendered Markdown links.\n * @param {string} url The url of the link or image\n */\nfunction escapePromptURL(url) {\n    return encodeURI(url).replace(/([\\\\()])/g, '\\\\$1');\n}\n\n/**\n * Action for opening the browse-file window to upload an image to a server.\n * @param {EasyMDE} editor The EasyMDE object\n */\nfunction drawUploadedImage(editor) {\n    // TODO: Draw the image template with a fake url? ie: '![](importing foo.png...)'\n    editor.openBrowseFileWindow();\n}\n\n/**\n * Action executed after an image have been successfully imported on the server.\n * @param {EasyMDE} editor The EasyMDE object\n * @param {string} url The url of the uploaded image\n */\nfunction afterImageUploaded(editor, url) {\n    var cm = editor.codemirror;\n    var stat = getState(cm);\n    var options = editor.options;\n    var imageName = url.substr(url.lastIndexOf('/') + 1);\n    var ext = imageName.substring(imageName.lastIndexOf('.') + 1).replace(/\\?.*$/, '').toLowerCase();\n\n    // Check if media is an image\n    if (['png', 'jpg', 'jpeg', 'gif', 'svg', 'apng', 'avif', 'webp'].includes(ext)) {\n        _replaceSelection(cm, stat.image, options.insertTexts.uploadedImage, url);\n    } else {\n        var text_link = options.insertTexts.link;\n        text_link[0] = '[' + imageName;\n        _replaceSelection(cm, stat.link, text_link, url);\n    }\n\n    // show uploaded image filename for 1000ms\n    editor.updateStatusBar('upload-image', editor.options.imageTexts.sbOnUploaded.replace('#image_name#', imageName));\n    setTimeout(function () {\n        editor.updateStatusBar('upload-image', editor.options.imageTexts.sbInit);\n    }, 1000);\n}\n\n/**\n * Action for drawing a table.\n * @param {EasyMDE} editor\n */\nfunction drawTable(editor) {\n    var cm = editor.codemirror;\n    var stat = getState(cm);\n    var options = editor.options;\n    _replaceSelection(cm, stat.table, options.insertTexts.table);\n}\n\n/**\n * Action for drawing a horizontal rule.\n * @param {EasyMDE} editor\n */\nfunction drawHorizontalRule(editor) {\n    var cm = editor.codemirror;\n    var stat = getState(cm);\n    var options = editor.options;\n    _replaceSelection(cm, stat.image, options.insertTexts.horizontalRule);\n}\n\n\n/**\n * Undo action.\n * @param {EasyMDE} editor\n */\nfunction undo(editor) {\n    var cm = editor.codemirror;\n    cm.undo();\n    cm.focus();\n}\n\n\n/**\n * Redo action.\n * @param {EasyMDE} editor\n */\nfunction redo(editor) {\n    var cm = editor.codemirror;\n    cm.redo();\n    cm.focus();\n}\n\n\n/**\n * Toggle side by side preview\n * @param {EasyMDE} editor\n */\nfunction toggleSideBySide(editor) {\n    var cm = editor.codemirror;\n    var wrapper = cm.getWrapperElement();\n    var preview = wrapper.nextSibling;\n    var toolbarButton = editor.toolbarElements && editor.toolbarElements['side-by-side'];\n    var useSideBySideListener = false;\n\n    var easyMDEContainer = wrapper.parentNode;\n\n    if (preview.classList.contains('editor-preview-active-side')) {\n        if (editor.options.sideBySideFullscreen === false) {\n            // if side-by-side not-fullscreen ok, remove classes when hiding side\n            easyMDEContainer.classList.remove('sided--no-fullscreen');\n        }\n        preview.classList.remove('editor-preview-active-side');\n        if (toolbarButton) toolbarButton.classList.remove('active');\n        wrapper.classList.remove('CodeMirror-sided');\n    } else {\n        // When the preview button is clicked for the first time,\n        // give some time for the transition from editor.css to fire and the view to slide from right to left,\n        // instead of just appearing.\n        setTimeout(function () {\n            if (!cm.getOption('fullScreen')) {\n                if (editor.options.sideBySideFullscreen === false) {\n                    // if side-by-side not-fullscreen ok, add classes when not fullscreen and showing side\n                    easyMDEContainer.classList.add('sided--no-fullscreen');\n                } else {\n                    toggleFullScreen(editor);\n                }\n            }\n            preview.classList.add('editor-preview-active-side');\n        }, 1);\n        if (toolbarButton) toolbarButton.classList.add('active');\n        wrapper.classList.add('CodeMirror-sided');\n        useSideBySideListener = true;\n    }\n\n    // Hide normal preview if active\n    var previewNormal = wrapper.lastChild;\n    if (previewNormal.classList.contains('editor-preview-active')) {\n        previewNormal.classList.remove('editor-preview-active');\n        var toolbar = editor.toolbarElements.preview;\n        var toolbar_div = editor.toolbar_div;\n        toolbar.classList.remove('active');\n        toolbar_div.classList.remove('disabled-for-preview');\n    }\n\n    var sideBySideRenderingFunction = function () {\n        var newValue = editor.options.previewRender(editor.value(), preview);\n        if (newValue != null) {\n            preview.innerHTML = newValue;\n        }\n    };\n\n    if (!cm.sideBySideRenderingFunction) {\n        cm.sideBySideRenderingFunction = sideBySideRenderingFunction;\n    }\n\n    if (useSideBySideListener) {\n        var newValue = editor.options.previewRender(editor.value(), preview);\n        if (newValue != null) {\n            preview.innerHTML = newValue;\n        }\n        cm.on('update', cm.sideBySideRenderingFunction);\n    } else {\n        cm.off('update', cm.sideBySideRenderingFunction);\n    }\n\n    // Refresh to fix selection being off (#309)\n    cm.refresh();\n}\n\n\n/**\n * Preview action.\n * @param {EasyMDE} editor\n */\nfunction togglePreview(editor) {\n    var cm = editor.codemirror;\n    var wrapper = cm.getWrapperElement();\n    var toolbar_div = editor.toolbar_div;\n    var toolbar = editor.options.toolbar ? editor.toolbarElements.preview : false;\n    var preview = wrapper.lastChild;\n\n    // Turn off side by side if needed\n    var sidebyside = cm.getWrapperElement().nextSibling;\n    if (sidebyside.classList.contains('editor-preview-active-side'))\n        toggleSideBySide(editor);\n\n    if (!preview || !preview.classList.contains('editor-preview-full')) {\n\n        preview = document.createElement('div');\n        preview.className = 'editor-preview-full';\n\n        if (editor.options.previewClass) {\n\n            if (Array.isArray(editor.options.previewClass)) {\n                for (var i = 0; i < editor.options.previewClass.length; i++) {\n                    preview.classList.add(editor.options.previewClass[i]);\n                }\n\n            } else if (typeof editor.options.previewClass === 'string') {\n                preview.classList.add(editor.options.previewClass);\n            }\n        }\n\n        wrapper.appendChild(preview);\n    }\n\n    if (preview.classList.contains('editor-preview-active')) {\n        preview.classList.remove('editor-preview-active');\n        if (toolbar) {\n            toolbar.classList.remove('active');\n            toolbar_div.classList.remove('disabled-for-preview');\n        }\n    } else {\n        // When the preview button is clicked for the first time,\n        // give some time for the transition from editor.css to fire and the view to slide from right to left,\n        // instead of just appearing.\n        setTimeout(function () {\n            preview.classList.add('editor-preview-active');\n        }, 1);\n        if (toolbar) {\n            toolbar.classList.add('active');\n            toolbar_div.classList.add('disabled-for-preview');\n        }\n    }\n\n    var preview_result = editor.options.previewRender(editor.value(), preview);\n    if (preview_result !== null) {\n        preview.innerHTML = preview_result;\n    }\n\n}\n\nfunction _replaceSelection(cm, active, startEnd, url) {\n    if (cm.getWrapperElement().lastChild.classList.contains('editor-preview-active'))\n        return;\n\n    var text;\n    var start = startEnd[0];\n    var end = startEnd[1];\n    var startPoint = {},\n        endPoint = {};\n    Object.assign(startPoint, cm.getCursor('start'));\n    Object.assign(endPoint, cm.getCursor('end'));\n    if (url) {\n        start = start.replace('#url#', url);  // url is in start for upload-image\n        end = end.replace('#url#', url);\n    }\n    if (active) {\n        text = cm.getLine(startPoint.line);\n        start = text.slice(0, startPoint.ch);\n        end = text.slice(startPoint.ch);\n        cm.replaceRange(start + end, {\n            line: startPoint.line,\n            ch: 0,\n        });\n    } else {\n        text = cm.getSelection();\n        cm.replaceSelection(start + text + end);\n\n        startPoint.ch += start.length;\n        if (startPoint !== endPoint) {\n            endPoint.ch += start.length;\n        }\n    }\n    cm.setSelection(startPoint, endPoint);\n    cm.focus();\n}\n\n\nfunction _toggleHeading(cm, direction, size) {\n    if (cm.getWrapperElement().lastChild.classList.contains('editor-preview-active'))\n        return;\n\n    var startPoint = cm.getCursor('start');\n    var endPoint = cm.getCursor('end');\n    for (var i = startPoint.line; i <= endPoint.line; i++) {\n        (function (i) {\n            var text = cm.getLine(i);\n            var currHeadingLevel = text.search(/[^#]/);\n\n            if (direction !== undefined) {\n                if (currHeadingLevel <= 0) {\n                    if (direction == 'bigger') {\n                        text = '###### ' + text;\n                    } else {\n                        text = '# ' + text;\n                    }\n                } else if (currHeadingLevel == 6 && direction == 'smaller') {\n                    text = text.substr(7);\n                } else if (currHeadingLevel == 1 && direction == 'bigger') {\n                    text = text.substr(2);\n                } else {\n                    if (direction == 'bigger') {\n                        text = text.substr(1);\n                    } else {\n                        text = '#' + text;\n                    }\n                }\n            } else {\n                if (currHeadingLevel <= 0) {\n                    text = '#'.repeat(size) + ' ' + text;\n                } else if (currHeadingLevel == size) {\n                    text = text.substr(currHeadingLevel + 1);\n                } else {\n                    text = '#'.repeat(size) + ' ' + text.substr(currHeadingLevel + 1);\n                }\n            }\n\n            cm.replaceRange(text, {\n                line: i,\n                ch: 0,\n            }, {\n                line: i,\n                ch: 99999999999999,\n            });\n        })(i);\n    }\n    cm.focus();\n}\n\n\nfunction _toggleLine(cm, name, liststyle) {\n    if (cm.getWrapperElement().lastChild.classList.contains('editor-preview-active'))\n        return;\n\n    var listRegexp = /^(\\s*)(\\*|-|\\+|\\d*\\.)(\\s+)/;\n    var whitespacesRegexp = /^\\s*/;\n\n    var stat = getState(cm);\n    var startPoint = cm.getCursor('start');\n    var endPoint = cm.getCursor('end');\n    var repl = {\n        'quote': /^(\\s*)>\\s+/,\n        'unordered-list': listRegexp,\n        'ordered-list': listRegexp,\n    };\n\n    var _getChar = function (name, i) {\n        var map = {\n            'quote': '>',\n            'unordered-list': liststyle,\n            'ordered-list': '%%i.',\n        };\n\n        return map[name].replace('%%i', i);\n    };\n\n    var _checkChar = function (name, char) {\n        var map = {\n            'quote': '>',\n            'unordered-list': '\\\\' + liststyle,\n            'ordered-list': '\\\\d+.',\n        };\n        var rt = new RegExp(map[name]);\n\n        return char && rt.test(char);\n    };\n\n    var _toggle = function (name, text, untoggleOnly) {\n        var arr = listRegexp.exec(text);\n        var char = _getChar(name, line);\n        if (arr !== null) {\n            if (_checkChar(name, arr[2])) {\n                char = '';\n            }\n            text = arr[1] + char + arr[3] + text.replace(whitespacesRegexp, '').replace(repl[name], '$1');\n        } else if (untoggleOnly == false) {\n            text = char + ' ' + text;\n        }\n        return text;\n    };\n\n    var line = 1;\n    for (var i = startPoint.line; i <= endPoint.line; i++) {\n        (function (i) {\n            var text = cm.getLine(i);\n            if (stat[name]) {\n                text = text.replace(repl[name], '$1');\n            } else {\n                // If we're toggling unordered-list formatting, check if the current line\n                // is part of an ordered-list, and if so, untoggle that first.\n                // Workaround for https://github.com/Ionaru/easy-markdown-editor/issues/92\n                if (name == 'unordered-list') {\n                    text = _toggle('ordered-list', text, true);\n                }\n                text = _toggle(name, text, false);\n                line += 1;\n            }\n            cm.replaceRange(text, {\n                line: i,\n                ch: 0,\n            }, {\n                line: i,\n                ch: 99999999999999,\n            });\n        })(i);\n    }\n    cm.focus();\n}\n\n/**\n * @param {EasyMDE} editor\n * @param {'link' | 'image'} type\n * @param {string} startEnd\n * @param {string} url\n */\nfunction _toggleLink(editor, type, startEnd, url) {\n    if (!editor.codemirror || editor.isPreviewActive()) {\n        return;\n    }\n\n    var cm = editor.codemirror;\n    var stat = getState(cm);\n    var active = stat[type];\n    if (!active) {\n        _replaceSelection(cm, active, startEnd, url);\n        return;\n    }\n\n    var startPoint = cm.getCursor('start');\n    var endPoint = cm.getCursor('end');\n    var text = cm.getLine(startPoint.line);\n    var start = text.slice(0, startPoint.ch);\n    var end = text.slice(startPoint.ch);\n\n    if (type == 'link') {\n        start = start.replace(/(.*)[^!]\\[/, '$1');\n    } else if (type == 'image') {\n        start = start.replace(/(.*)!\\[$/, '$1');\n    }\n    end = end.replace(/]\\(.*?\\)/, '');\n\n    cm.replaceRange(start + end, {\n        line: startPoint.line,\n        ch: 0,\n    }, {\n        line: startPoint.line,\n        ch: 99999999999999,\n    });\n\n    startPoint.ch -= startEnd[0].length;\n    if (startPoint !== endPoint) {\n        endPoint.ch -= startEnd[0].length;\n    }\n    cm.setSelection(startPoint, endPoint);\n    cm.focus();\n}\n\n/**\n * @param {EasyMDE} editor\n */\nfunction _toggleBlock(editor, type, start_chars, end_chars) {\n    if (!editor.codemirror || editor.isPreviewActive()) {\n        return;\n    }\n\n    end_chars = (typeof end_chars === 'undefined') ? start_chars : end_chars;\n    var cm = editor.codemirror;\n    var stat = getState(cm);\n\n    var text;\n    var start = start_chars;\n    var end = end_chars;\n\n    var startPoint = cm.getCursor('start');\n    var endPoint = cm.getCursor('end');\n\n    if (stat[type]) {\n        text = cm.getLine(startPoint.line);\n        start = text.slice(0, startPoint.ch);\n        end = text.slice(startPoint.ch);\n        if (type == 'bold') {\n            start = start.replace(/(\\*\\*|__)(?![\\s\\S]*(\\*\\*|__))/, '');\n            end = end.replace(/(\\*\\*|__)/, '');\n        } else if (type == 'italic') {\n            start = start.replace(/(\\*|_)(?![\\s\\S]*(\\*|_))/, '');\n            end = end.replace(/(\\*|_)/, '');\n        } else if (type == 'strikethrough') {\n            start = start.replace(/(\\*\\*|~~)(?![\\s\\S]*(\\*\\*|~~))/, '');\n            end = end.replace(/(\\*\\*|~~)/, '');\n        }\n        cm.replaceRange(start + end, {\n            line: startPoint.line,\n            ch: 0,\n        }, {\n            line: startPoint.line,\n            ch: 99999999999999,\n        });\n\n        if (type == 'bold' || type == 'strikethrough') {\n            startPoint.ch -= 2;\n            if (startPoint !== endPoint) {\n                endPoint.ch -= 2;\n            }\n        } else if (type == 'italic') {\n            startPoint.ch -= 1;\n            if (startPoint !== endPoint) {\n                endPoint.ch -= 1;\n            }\n        }\n    } else {\n        text = cm.getSelection();\n        if (type == 'bold') {\n            text = text.split('**').join('');\n            text = text.split('__').join('');\n        } else if (type == 'italic') {\n            text = text.split('*').join('');\n            text = text.split('_').join('');\n        } else if (type == 'strikethrough') {\n            text = text.split('~~').join('');\n        }\n        cm.replaceSelection(start + text + end);\n\n        startPoint.ch += start_chars.length;\n        endPoint.ch = startPoint.ch + text.length;\n    }\n\n    cm.setSelection(startPoint, endPoint);\n    cm.focus();\n}\n\nfunction _cleanBlock(cm) {\n    if (cm.getWrapperElement().lastChild.classList.contains('editor-preview-active'))\n        return;\n\n    var startPoint = cm.getCursor('start');\n    var endPoint = cm.getCursor('end');\n    var text;\n\n    for (var line = startPoint.line; line <= endPoint.line; line++) {\n        text = cm.getLine(line);\n        text = text.replace(/^[ ]*([# ]+|\\*|-|[> ]+|[0-9]+(.|\\)))[ ]*/, '');\n\n        cm.replaceRange(text, {\n            line: line,\n            ch: 0,\n        }, {\n            line: line,\n            ch: 99999999999999,\n        });\n    }\n}\n\n/**\n * Convert a number of bytes to a human-readable file size. If you desire\n * to add a space between the value and the unit, you need to add this space\n * to the given units.\n * @param bytes {number} A number of bytes, as integer. Ex: 421137\n * @param units {number[]} An array of human-readable units, ie. [' B', ' K', ' MB']\n * @returns string A human-readable file size. Ex: '412 KB'\n */\nfunction humanFileSize(bytes, units) {\n    if (Math.abs(bytes) < 1024) {\n        return '' + bytes + units[0];\n    }\n    var u = 0;\n    do {\n        bytes /= 1024;\n        ++u;\n    } while (Math.abs(bytes) >= 1024 && u < units.length);\n    return '' + bytes.toFixed(1) + units[u];\n}\n\n// Merge the properties of one object into another.\nfunction _mergeProperties(target, source) {\n    for (var property in source) {\n        if (Object.prototype.hasOwnProperty.call(source, property)) {\n            if (source[property] instanceof Array) {\n                target[property] = source[property].concat(target[property] instanceof Array ? target[property] : []);\n            } else if (\n                source[property] !== null &&\n                typeof source[property] === 'object' &&\n                source[property].constructor === Object\n            ) {\n                target[property] = _mergeProperties(target[property] || {}, source[property]);\n            } else {\n                target[property] = source[property];\n            }\n        }\n    }\n\n    return target;\n}\n\n// Merge an arbitrary number of objects into one.\nfunction extend(target) {\n    for (var i = 1; i < arguments.length; i++) {\n        target = _mergeProperties(target, arguments[i]);\n    }\n\n    return target;\n}\n\n/* The right word count in respect for CJK. */\nfunction wordCount(data) {\n    var pattern = /[a-zA-Z0-9_\\u00A0-\\u02AF\\u0392-\\u03c9\\u0410-\\u04F9]+|[\\u4E00-\\u9FFF\\u3400-\\u4dbf\\uf900-\\ufaff\\u3040-\\u309f\\uac00-\\ud7af]+/g;\n    var m = data.match(pattern);\n    var count = 0;\n    if (m === null) return count;\n    for (var i = 0; i < m.length; i++) {\n        if (m[i].charCodeAt(0) >= 0x4E00) {\n            count += m[i].length;\n        } else {\n            count += 1;\n        }\n    }\n    return count;\n}\n\nvar iconClassMap = {\n    'bold': 'fa fa-bold',\n    'italic': 'fa fa-italic',\n    'strikethrough': 'fa fa-strikethrough',\n    'heading': 'fa fa-header fa-heading',\n    'heading-smaller': 'fa fa-header fa-heading header-smaller',\n    'heading-bigger': 'fa fa-header fa-heading header-bigger',\n    'heading-1': 'fa fa-header fa-heading header-1',\n    'heading-2': 'fa fa-header fa-heading header-2',\n    'heading-3': 'fa fa-header fa-heading header-3',\n    'code': 'fa fa-code',\n    'quote': 'fa fa-quote-left',\n    'ordered-list': 'fa fa-list-ol',\n    'unordered-list': 'fa fa-list-ul',\n    'clean-block': 'fa fa-eraser',\n    'link': 'fa fa-link',\n    'image': 'fa fa-image',\n    'upload-image': 'fa fa-image',\n    'table': 'fa fa-table',\n    'horizontal-rule': 'fa fa-minus',\n    'preview': 'fa fa-eye',\n    'side-by-side': 'fa fa-columns',\n    'fullscreen': 'fa fa-arrows-alt',\n    'guide': 'fa fa-question-circle',\n    'undo': 'fa fa-undo',\n    'redo': 'fa fa-repeat fa-redo',\n};\n\nvar toolbarBuiltInButtons = {\n    'bold': {\n        name: 'bold',\n        action: toggleBold,\n        className: iconClassMap['bold'],\n        title: 'Bold',\n        default: true,\n    },\n    'italic': {\n        name: 'italic',\n        action: toggleItalic,\n        className: iconClassMap['italic'],\n        title: 'Italic',\n        default: true,\n    },\n    'strikethrough': {\n        name: 'strikethrough',\n        action: toggleStrikethrough,\n        className: iconClassMap['strikethrough'],\n        title: 'Strikethrough',\n    },\n    'heading': {\n        name: 'heading',\n        action: toggleHeadingSmaller,\n        className: iconClassMap['heading'],\n        title: 'Heading',\n        default: true,\n    },\n    'heading-smaller': {\n        name: 'heading-smaller',\n        action: toggleHeadingSmaller,\n        className: iconClassMap['heading-smaller'],\n        title: 'Smaller Heading',\n    },\n    'heading-bigger': {\n        name: 'heading-bigger',\n        action: toggleHeadingBigger,\n        className: iconClassMap['heading-bigger'],\n        title: 'Bigger Heading',\n    },\n    'heading-1': {\n        name: 'heading-1',\n        action: toggleHeading1,\n        className: iconClassMap['heading-1'],\n        title: 'Big Heading',\n    },\n    'heading-2': {\n        name: 'heading-2',\n        action: toggleHeading2,\n        className: iconClassMap['heading-2'],\n        title: 'Medium Heading',\n    },\n    'heading-3': {\n        name: 'heading-3',\n        action: toggleHeading3,\n        className: iconClassMap['heading-3'],\n        title: 'Small Heading',\n    },\n    'separator-1': {\n        name: 'separator-1',\n    },\n    'code': {\n        name: 'code',\n        action: toggleCodeBlock,\n        className: iconClassMap['code'],\n        title: 'Code',\n    },\n    'quote': {\n        name: 'quote',\n        action: toggleBlockquote,\n        className: iconClassMap['quote'],\n        title: 'Quote',\n        default: true,\n    },\n    'unordered-list': {\n        name: 'unordered-list',\n        action: toggleUnorderedList,\n        className: iconClassMap['unordered-list'],\n        title: 'Generic List',\n        default: true,\n    },\n    'ordered-list': {\n        name: 'ordered-list',\n        action: toggleOrderedList,\n        className: iconClassMap['ordered-list'],\n        title: 'Numbered List',\n        default: true,\n    },\n    'clean-block': {\n        name: 'clean-block',\n        action: cleanBlock,\n        className: iconClassMap['clean-block'],\n        title: 'Clean block',\n    },\n    'separator-2': {\n        name: 'separator-2',\n    },\n    'link': {\n        name: 'link',\n        action: drawLink,\n        className: iconClassMap['link'],\n        title: 'Create Link',\n        default: true,\n    },\n    'image': {\n        name: 'image',\n        action: drawImage,\n        className: iconClassMap['image'],\n        title: 'Insert Image',\n        default: true,\n    },\n    'upload-image': {\n        name: 'upload-image',\n        action: drawUploadedImage,\n        className: iconClassMap['upload-image'],\n        title: 'Import an image',\n    },\n    'table': {\n        name: 'table',\n        action: drawTable,\n        className: iconClassMap['table'],\n        title: 'Insert Table',\n    },\n    'horizontal-rule': {\n        name: 'horizontal-rule',\n        action: drawHorizontalRule,\n        className: iconClassMap['horizontal-rule'],\n        title: 'Insert Horizontal Line',\n    },\n    'separator-3': {\n        name: 'separator-3',\n    },\n    'preview': {\n        name: 'preview',\n        action: togglePreview,\n        className: iconClassMap['preview'],\n        noDisable: true,\n        title: 'Toggle Preview',\n        default: true,\n    },\n    'side-by-side': {\n        name: 'side-by-side',\n        action: toggleSideBySide,\n        className: iconClassMap['side-by-side'],\n        noDisable: true,\n        noMobile: true,\n        title: 'Toggle Side by Side',\n        default: true,\n    },\n    'fullscreen': {\n        name: 'fullscreen',\n        action: toggleFullScreen,\n        className: iconClassMap['fullscreen'],\n        noDisable: true,\n        noMobile: true,\n        title: 'Toggle Fullscreen',\n        default: true,\n    },\n    'separator-4': {\n        name: 'separator-4',\n    },\n    'guide': {\n        name: 'guide',\n        action: 'https://www.markdownguide.org/basic-syntax/',\n        className: iconClassMap['guide'],\n        noDisable: true,\n        title: 'Markdown Guide',\n        default: true,\n    },\n    'separator-5': {\n        name: 'separator-5',\n    },\n    'undo': {\n        name: 'undo',\n        action: undo,\n        className: iconClassMap['undo'],\n        noDisable: true,\n        title: 'Undo',\n    },\n    'redo': {\n        name: 'redo',\n        action: redo,\n        className: iconClassMap['redo'],\n        noDisable: true,\n        title: 'Redo',\n    },\n};\n\nvar insertTexts = {\n    link: ['[', '](#url#)'],\n    image: ['![', '](#url#)'],\n    uploadedImage: ['![](#url#)', ''],\n    // uploadedImage: ['![](#url#)\\n', ''], // TODO: New line insertion doesn't work here.\n    table: ['', '\\n\\n| Column 1 | Column 2 | Column 3 |\\n| -------- | -------- | -------- |\\n| Text     | Text     | Text     |\\n\\n'],\n    horizontalRule: ['', '\\n\\n-----\\n\\n'],\n};\n\nvar promptTexts = {\n    link: 'URL for the link:',\n    image: 'URL of the image:',\n};\n\nvar timeFormat = {\n    locale: 'en-US',\n    format: {\n        hour: '2-digit',\n        minute: '2-digit',\n    },\n};\n\nvar blockStyles = {\n    'bold': '**',\n    'code': '```',\n    'italic': '*',\n};\n\n/**\n * Texts displayed to the user (mainly on the status bar) for the import image\n * feature. Can be used for customization or internationalization.\n */\nvar imageTexts = {\n    sbInit: 'Attach files by drag and dropping or pasting from clipboard.',\n    sbOnDragEnter: 'Drop image to upload it.',\n    sbOnDrop: 'Uploading image #images_names#...',\n    sbProgress: 'Uploading #file_name#: #progress#%',\n    sbOnUploaded: 'Uploaded #image_name#',\n    sizeUnits: ' B, KB, MB',\n};\n\n/**\n * Errors displayed to the user, using the `errorCallback` option. Can be used for\n * customization or internationalization.\n */\nvar errorMessages = {\n    noFileGiven: 'You must select a file.',\n    typeNotAllowed: 'This image type is not allowed.',\n    fileTooLarge: 'Image #image_name# is too big (#image_size#).\\n' +\n        'Maximum file size is #image_max_size#.',\n    importError: 'Something went wrong when uploading the image #image_name#.',\n};\n\n/**\n * Interface of EasyMDE.\n */\nfunction EasyMDE(options) {\n    // Handle options parameter\n    options = options || {};\n\n    // Used later to refer to it\"s parent\n    options.parent = this;\n\n    // Check if Font Awesome needs to be auto downloaded\n    var autoDownloadFA = true;\n\n    if (options.autoDownloadFontAwesome === false) {\n        autoDownloadFA = false;\n    }\n\n    if (options.autoDownloadFontAwesome !== true) {\n        var styleSheets = document.styleSheets;\n        for (var i = 0; i < styleSheets.length; i++) {\n            if (!styleSheets[i].href)\n                continue;\n\n            if (styleSheets[i].href.indexOf('//maxcdn.bootstrapcdn.com/font-awesome/') > -1) {\n                autoDownloadFA = false;\n            }\n        }\n    }\n\n    if (autoDownloadFA) {\n        var link = document.createElement('link');\n        link.rel = 'stylesheet';\n        link.href = 'https://maxcdn.bootstrapcdn.com/font-awesome/latest/css/font-awesome.min.css';\n        document.getElementsByTagName('head')[0].appendChild(link);\n    }\n\n\n    // Find the textarea to use\n    if (options.element) {\n        this.element = options.element;\n    } else if (options.element === null) {\n        // This means that the element option was specified, but no element was found\n        console.log('EasyMDE: Error. No element was found.');\n        return;\n    }\n\n\n    // Handle toolbar\n    if (options.toolbar === undefined) {\n        // Initialize\n        options.toolbar = [];\n\n\n        // Loop over the built in buttons, to get the preferred order\n        for (var key in toolbarBuiltInButtons) {\n            if (Object.prototype.hasOwnProperty.call(toolbarBuiltInButtons, key)) {\n                if (key.indexOf('separator-') != -1) {\n                    options.toolbar.push('|');\n                }\n\n                if (toolbarBuiltInButtons[key].default === true || (options.showIcons && options.showIcons.constructor === Array && options.showIcons.indexOf(key) != -1)) {\n                    options.toolbar.push(key);\n                }\n            }\n        }\n    }\n\n    // Editor preview styling class.\n    if (!Object.prototype.hasOwnProperty.call(options, 'previewClass')) {\n        options.previewClass = 'editor-preview';\n    }\n\n    // Handle status bar\n    if (!Object.prototype.hasOwnProperty.call(options, 'status')) {\n        options.status = ['autosave', 'lines', 'words', 'cursor'];\n\n        if (options.uploadImage) {\n            options.status.unshift('upload-image');\n        }\n    }\n\n\n    // Add default preview rendering function\n    if (!options.previewRender) {\n        options.previewRender = function (plainText) {\n            // Note: \"this\" refers to the options object\n            return this.parent.markdown(plainText);\n        };\n    }\n\n\n    // Set default options for parsing config\n    options.parsingConfig = extend({\n        highlightFormatting: true, // needed for toggleCodeBlock to detect types of code\n    }, options.parsingConfig || {});\n\n\n    // Merging the insertTexts, with the given options\n    options.insertTexts = extend({}, insertTexts, options.insertTexts || {});\n\n\n    // Merging the promptTexts, with the given options\n    options.promptTexts = extend({}, promptTexts, options.promptTexts || {});\n\n\n    // Merging the blockStyles, with the given options\n    options.blockStyles = extend({}, blockStyles, options.blockStyles || {});\n\n\n    if (options.autosave != undefined) {\n        // Merging the Autosave timeFormat, with the given options\n        options.autosave.timeFormat = extend({}, timeFormat, options.autosave.timeFormat || {});\n    }\n\n    options.iconClassMap = extend({}, iconClassMap, options.iconClassMap || {});\n\n    // Merging the shortcuts, with the given options\n    options.shortcuts = extend({}, shortcuts, options.shortcuts || {});\n\n    options.maxHeight = options.maxHeight || undefined;\n\n    options.direction = options.direction || 'ltr';\n\n    if (typeof options.maxHeight !== 'undefined') {\n        // Min and max height are equal if maxHeight is set\n        options.minHeight = options.maxHeight;\n    } else {\n        options.minHeight = options.minHeight || '300px';\n    }\n\n    options.errorCallback = options.errorCallback || function (errorMessage) {\n        alert(errorMessage);\n    };\n\n    // Import-image default configuration\n    options.uploadImage = options.uploadImage || false;\n    options.imageMaxSize = options.imageMaxSize || 2097152; // 1024 * 1024 * 2\n    options.imageAccept = options.imageAccept || 'image/png, image/jpeg, image/gif, image/avif';\n    options.imageTexts = extend({}, imageTexts, options.imageTexts || {});\n    options.errorMessages = extend({}, errorMessages, options.errorMessages || {});\n    options.imagePathAbsolute = options.imagePathAbsolute || false;\n    options.imageCSRFName = options.imageCSRFName || 'csrfmiddlewaretoken';\n    options.imageCSRFHeader = options.imageCSRFHeader || false;\n\n\n    // Change unique_id to uniqueId for backwards compatibility\n    if (options.autosave != undefined && options.autosave.unique_id != undefined && options.autosave.unique_id != '')\n        options.autosave.uniqueId = options.autosave.unique_id;\n\n    // If overlay mode is specified and combine is not provided, default it to true\n    if (options.overlayMode && options.overlayMode.combine === undefined) {\n        options.overlayMode.combine = true;\n    }\n\n    // Update this options\n    this.options = options;\n\n\n    // Auto render\n    this.render();\n\n\n    // The codemirror component is only available after rendering\n    // so, the setter for the initialValue can only run after\n    // the element has been rendered\n    if (options.initialValue && (!this.options.autosave || this.options.autosave.foundSavedValue !== true)) {\n        this.value(options.initialValue);\n    }\n\n    if (options.uploadImage) {\n        var self = this;\n\n        this.codemirror.on('dragenter', function (cm, event) {\n            self.updateStatusBar('upload-image', self.options.imageTexts.sbOnDragEnter);\n            event.stopPropagation();\n            event.preventDefault();\n        });\n        this.codemirror.on('dragend', function (cm, event) {\n            self.updateStatusBar('upload-image', self.options.imageTexts.sbInit);\n            event.stopPropagation();\n            event.preventDefault();\n        });\n        this.codemirror.on('dragleave', function (cm, event) {\n            self.updateStatusBar('upload-image', self.options.imageTexts.sbInit);\n            event.stopPropagation();\n            event.preventDefault();\n        });\n\n        this.codemirror.on('dragover', function (cm, event) {\n            self.updateStatusBar('upload-image', self.options.imageTexts.sbOnDragEnter);\n            event.stopPropagation();\n            event.preventDefault();\n        });\n\n        this.codemirror.on('drop', function (cm, event) {\n            event.stopPropagation();\n            event.preventDefault();\n            if (options.imageUploadFunction) {\n                self.uploadImagesUsingCustomFunction(options.imageUploadFunction, event.dataTransfer.files);\n            } else {\n                self.uploadImages(event.dataTransfer.files);\n            }\n        });\n\n        this.codemirror.on('paste', function (cm, event) {\n            if (options.imageUploadFunction) {\n                self.uploadImagesUsingCustomFunction(options.imageUploadFunction, event.clipboardData.files);\n            } else {\n                self.uploadImages(event.clipboardData.files);\n            }\n        });\n    }\n}\n\n/**\n * Upload asynchronously a list of images to a server.\n *\n * Can be triggered by:\n * - drag&drop;\n * - copy-paste;\n * - the browse-file window (opened when the user clicks on the *upload-image* icon).\n * @param {FileList} files The files to upload the the server.\n * @param [onSuccess] {function} see EasyMDE.prototype.uploadImage\n * @param [onError] {function} see EasyMDE.prototype.uploadImage\n */\nEasyMDE.prototype.uploadImages = function (files, onSuccess, onError) {\n    if (files.length === 0) {\n        return;\n    }\n    var names = [];\n    for (var i = 0; i < files.length; i++) {\n        names.push(files[i].name);\n        this.uploadImage(files[i], onSuccess, onError);\n    }\n    this.updateStatusBar('upload-image', this.options.imageTexts.sbOnDrop.replace('#images_names#', names.join(', ')));\n};\n\n/**\n * Upload asynchronously a list of images to a server.\n *\n * Can be triggered by:\n * - drag&drop;\n * - copy-paste;\n * - the browse-file window (opened when the user clicks on the *upload-image* icon).\n * @param imageUploadFunction {Function} The custom function to upload the image passed in options.\n * @param {FileList} files The files to upload the the server.\n */\nEasyMDE.prototype.uploadImagesUsingCustomFunction = function (imageUploadFunction, files) {\n    if (files.length === 0) {\n        return;\n    }\n    var names = [];\n    for (var i = 0; i < files.length; i++) {\n        names.push(files[i].name);\n        this.uploadImageUsingCustomFunction(imageUploadFunction, files[i]);\n    }\n    this.updateStatusBar('upload-image', this.options.imageTexts.sbOnDrop.replace('#images_names#', names.join(', ')));\n};\n\n/**\n * Update an item in the status bar.\n * @param itemName {string} The name of the item to update (ie. 'upload-image', 'autosave', etc.).\n * @param content {string} the new content of the item to write in the status bar.\n */\nEasyMDE.prototype.updateStatusBar = function (itemName, content) {\n    if (!this.gui.statusbar) {\n        return;\n    }\n\n    var matchingClasses = this.gui.statusbar.getElementsByClassName(itemName);\n    if (matchingClasses.length === 1) {\n        this.gui.statusbar.getElementsByClassName(itemName)[0].textContent = content;\n    } else if (matchingClasses.length === 0) {\n        console.log('EasyMDE: status bar item ' + itemName + ' was not found.');\n    } else {\n        console.log('EasyMDE: Several status bar items named ' + itemName + ' was found.');\n    }\n};\n\n/**\n * Default markdown render.\n */\nEasyMDE.prototype.markdown = function (text) {\n    if (marked) {\n        // Initialize\n        var markedOptions;\n        if (this.options && this.options.renderingConfig && this.options.renderingConfig.markedOptions) {\n            markedOptions = this.options.renderingConfig.markedOptions;\n        } else {\n            markedOptions = {};\n        }\n\n        // Update options\n        if (this.options && this.options.renderingConfig && this.options.renderingConfig.singleLineBreaks === false) {\n            markedOptions.breaks = false;\n        } else {\n            markedOptions.breaks = true;\n        }\n\n        if (this.options && this.options.renderingConfig && this.options.renderingConfig.codeSyntaxHighlighting === true) {\n\n            /* Get HLJS from config or window */\n            var hljs = this.options.renderingConfig.hljs || window.hljs;\n\n            /* Check if HLJS loaded */\n            if (hljs) {\n                markedOptions.highlight = function (code, language) {\n                    if (language && hljs.getLanguage(language)) {\n                        return hljs.highlight(language, code).value;\n                    } else {\n                        return hljs.highlightAuto(code).value;\n                    }\n                };\n            }\n        }\n\n        // Set options\n        marked.setOptions(markedOptions);\n\n        // Convert the markdown to HTML\n        var htmlText = marked.parse(text);\n\n        // Sanitize HTML\n        if (this.options.renderingConfig && typeof this.options.renderingConfig.sanitizerFunction === 'function') {\n            htmlText = this.options.renderingConfig.sanitizerFunction.call(this, htmlText);\n        }\n\n        // Edit the HTML anchors to add 'target=\"_blank\"' by default.\n        htmlText = addAnchorTargetBlank(htmlText);\n\n        // Remove list-style when rendering checkboxes\n        htmlText = removeListStyleWhenCheckbox(htmlText);\n\n        return htmlText;\n    }\n};\n\n/**\n * Render editor to the given element.\n */\nEasyMDE.prototype.render = function (el) {\n    if (!el) {\n        el = this.element || document.getElementsByTagName('textarea')[0];\n    }\n\n    if (this._rendered && this._rendered === el) {\n        // Already rendered.\n        return;\n    }\n\n    this.element = el;\n    var options = this.options;\n\n    var self = this;\n    var keyMaps = {};\n\n    for (var key in options.shortcuts) {\n        // null stands for \"do not bind this command\"\n        if (options.shortcuts[key] !== null && bindings[key] !== null) {\n            (function (key) {\n                keyMaps[fixShortcut(options.shortcuts[key])] = function () {\n                    var action = bindings[key];\n                    if (typeof action === 'function') {\n                        action(self);\n                    } else if (typeof action === 'string') {\n                        window.open(action, '_blank');\n                    }\n                };\n            })(key);\n        }\n    }\n\n    keyMaps['Enter'] = 'newlineAndIndentContinueMarkdownList';\n    keyMaps['Tab'] = 'tabAndIndentMarkdownList';\n    keyMaps['Shift-Tab'] = 'shiftTabAndUnindentMarkdownList';\n    keyMaps['Esc'] = function (cm) {\n        if (cm.getOption('fullScreen')) toggleFullScreen(self);\n    };\n\n    this.documentOnKeyDown = function (e) {\n        e = e || window.event;\n\n        if (e.keyCode == 27) {\n            if (self.codemirror.getOption('fullScreen')) toggleFullScreen(self);\n        }\n    };\n    document.addEventListener('keydown', this.documentOnKeyDown, false);\n\n    var mode, backdrop;\n\n    // CodeMirror overlay mode\n    if (options.overlayMode) {\n        CodeMirror.defineMode('overlay-mode', function (config) {\n            return CodeMirror.overlayMode(CodeMirror.getMode(config, options.spellChecker !== false ? 'spell-checker' : 'gfm'), options.overlayMode.mode, options.overlayMode.combine);\n        });\n\n        mode = 'overlay-mode';\n        backdrop = options.parsingConfig;\n        backdrop.gitHubSpice = false;\n    } else {\n        mode = options.parsingConfig;\n        mode.name = 'gfm';\n        mode.gitHubSpice = false;\n    }\n    if (options.spellChecker !== false) {\n        mode = 'spell-checker';\n        backdrop = options.parsingConfig;\n        backdrop.name = 'gfm';\n        backdrop.gitHubSpice = false;\n\n        if (typeof options.spellChecker === 'function') {\n            options.spellChecker({\n                codeMirrorInstance: CodeMirror,\n            });\n        } else {\n            CodeMirrorSpellChecker({\n                codeMirrorInstance: CodeMirror,\n            });\n        }\n    }\n\n    // eslint-disable-next-line no-unused-vars\n    function configureMouse(cm, repeat, event) {\n        return {\n            addNew: false,\n        };\n    }\n\n    this.codemirror = CodeMirror.fromTextArea(el, {\n        mode: mode,\n        backdrop: backdrop,\n        theme: (options.theme != undefined) ? options.theme : 'easymde',\n        tabSize: (options.tabSize != undefined) ? options.tabSize : 2,\n        indentUnit: (options.tabSize != undefined) ? options.tabSize : 2,\n        indentWithTabs: (options.indentWithTabs === false) ? false : true,\n        lineNumbers: (options.lineNumbers === true) ? true : false,\n        autofocus: (options.autofocus === true) ? true : false,\n        extraKeys: keyMaps,\n        direction: options.direction,\n        lineWrapping: (options.lineWrapping === false) ? false : true,\n        allowDropFileTypes: ['text/plain'],\n        placeholder: options.placeholder || el.getAttribute('placeholder') || '',\n        styleSelectedText: (options.styleSelectedText != undefined) ? options.styleSelectedText : !isMobile(),\n        scrollbarStyle: (options.scrollbarStyle != undefined) ? options.scrollbarStyle : 'native',\n        configureMouse: configureMouse,\n        inputStyle: (options.inputStyle != undefined) ? options.inputStyle : isMobile() ? 'contenteditable' : 'textarea',\n        spellcheck: (options.nativeSpellcheck != undefined) ? options.nativeSpellcheck : true,\n        autoRefresh: (options.autoRefresh != undefined) ? options.autoRefresh : false,\n    });\n\n    this.codemirror.getScrollerElement().style.minHeight = options.minHeight;\n\n    if (typeof options.maxHeight !== 'undefined') {\n        this.codemirror.getScrollerElement().style.height = options.maxHeight;\n    }\n\n    if (options.forceSync === true) {\n        var cm = this.codemirror;\n        cm.on('change', function () {\n            cm.save();\n        });\n    }\n\n    this.gui = {};\n\n    // Wrap Codemirror with container before create toolbar, etc,\n    // to use with sideBySideFullscreen option.\n    var easyMDEContainer = document.createElement('div');\n    easyMDEContainer.classList.add('EasyMDEContainer');\n    easyMDEContainer.setAttribute('role', 'application');\n    var cmWrapper = this.codemirror.getWrapperElement();\n    cmWrapper.parentNode.insertBefore(easyMDEContainer, cmWrapper);\n    easyMDEContainer.appendChild(cmWrapper);\n\n    if (options.toolbar !== false) {\n        this.gui.toolbar = this.createToolbar();\n    }\n    if (options.status !== false) {\n        this.gui.statusbar = this.createStatusbar();\n    }\n    if (options.autosave != undefined && options.autosave.enabled === true) {\n        this.autosave(); // use to load localstorage content\n        this.codemirror.on('change', function () {\n            clearTimeout(self._autosave_timeout);\n            self._autosave_timeout = setTimeout(function () {\n                self.autosave();\n            }, self.options.autosave.submit_delay || self.options.autosave.delay || 1000);\n        });\n    }\n\n    function calcHeight(naturalWidth, naturalHeight) {\n        var height;\n        var viewportWidth = window.getComputedStyle(document.querySelector('.CodeMirror-sizer')).width.replace('px', '');\n        if (naturalWidth < viewportWidth) {\n            height = naturalHeight + 'px';\n        } else {\n            height = (naturalHeight / naturalWidth * 100) + '%';\n        }\n        return height;\n    }\n\n    var _vm = this;\n\n\n    function assignImageBlockAttributes(parentEl, img) {\n        parentEl.setAttribute('data-img-src', img.url);\n        parentEl.setAttribute('style', '--bg-image:url(' + img.url + ');--width:' + img.naturalWidth + 'px;--height:' + calcHeight(img.naturalWidth, img.naturalHeight));\n        _vm.codemirror.setSize();\n    }\n\n    function handleImages() {\n        if (!options.previewImagesInEditor) {\n            return;\n        }\n\n        easyMDEContainer.querySelectorAll('.cm-image-marker').forEach(function (e) {\n            var parentEl = e.parentElement;\n            if (!parentEl.innerText.match(/^!\\[.*?\\]\\(.*\\)/g)) {\n                // if img pasted on the same line with other text, don't preview, preview only images on separate line\n                return;\n            }\n            if (!parentEl.hasAttribute('data-img-src')) {\n                var srcAttr = parentEl.innerText.match('\\\\((.*)\\\\)'); // might require better parsing according to markdown spec\n                if (!window.EMDEimagesCache) {\n                    window.EMDEimagesCache = {};\n                }\n\n                if (srcAttr && srcAttr.length >= 2) {\n                    var keySrc = srcAttr[1];\n\n                    if (options.imagesPreviewHandler) {\n                        var newSrc = options.imagesPreviewHandler(srcAttr[1]);\n                        // defensive check making sure the handler provided by the user returns a string\n                        if (typeof newSrc === 'string') {\n                            keySrc = newSrc;\n                        }\n                    }\n\n                    if (!window.EMDEimagesCache[keySrc]) {\n                        var img = document.createElement('img');\n                        img.onload = function () {\n                            window.EMDEimagesCache[keySrc] = {\n                                naturalWidth: img.naturalWidth,\n                                naturalHeight: img.naturalHeight,\n                                url: keySrc,\n                            };\n                            assignImageBlockAttributes(parentEl, window.EMDEimagesCache[keySrc]);\n                        };\n                        img.src = keySrc;\n                    } else {\n                        assignImageBlockAttributes(parentEl, window.EMDEimagesCache[keySrc]);\n                    }\n                }\n            }\n        });\n    }\n\n    this.codemirror.on('update', function () {\n        handleImages();\n    });\n\n    this.gui.sideBySide = this.createSideBySide();\n    this._rendered = this.element;\n\n    if (options.autofocus === true || el.autofocus) {\n        this.codemirror.focus();\n    }\n\n    // Fixes CodeMirror bug (#344)\n    var temp_cm = this.codemirror;\n    setTimeout(function () {\n        temp_cm.refresh();\n    }.bind(temp_cm), 0);\n};\n\nEasyMDE.prototype.cleanup = function () {\n    document.removeEventListener('keydown', this.documentOnKeyDown);\n};\n\n// Safari, in Private Browsing Mode, looks like it supports localStorage but all calls to setItem throw QuotaExceededError. We're going to detect this and set a variable accordingly.\nfunction isLocalStorageAvailable() {\n    if (typeof localStorage === 'object') {\n        try {\n            localStorage.setItem('smde_localStorage', 1);\n            localStorage.removeItem('smde_localStorage');\n        } catch (e) {\n            return false;\n        }\n    } else {\n        return false;\n    }\n\n    return true;\n}\n\nEasyMDE.prototype.autosave = function () {\n    if (isLocalStorageAvailable()) {\n        var easyMDE = this;\n\n        if (this.options.autosave.uniqueId == undefined || this.options.autosave.uniqueId == '') {\n            console.log('EasyMDE: You must set a uniqueId to use the autosave feature');\n            return;\n        }\n\n        if (this.options.autosave.binded !== true) {\n            if (easyMDE.element.form != null && easyMDE.element.form != undefined) {\n                easyMDE.element.form.addEventListener('submit', function () {\n                    clearTimeout(easyMDE.autosaveTimeoutId);\n                    easyMDE.autosaveTimeoutId = undefined;\n\n                    localStorage.removeItem('smde_' + easyMDE.options.autosave.uniqueId);\n                });\n            }\n\n            this.options.autosave.binded = true;\n        }\n\n        if (this.options.autosave.loaded !== true) {\n            if (typeof localStorage.getItem('smde_' + this.options.autosave.uniqueId) == 'string' && localStorage.getItem('smde_' + this.options.autosave.uniqueId) != '') {\n                this.codemirror.setValue(localStorage.getItem('smde_' + this.options.autosave.uniqueId));\n                this.options.autosave.foundSavedValue = true;\n            }\n\n            this.options.autosave.loaded = true;\n        }\n\n        var value = easyMDE.value();\n        if (value !== '') {\n            localStorage.setItem('smde_' + this.options.autosave.uniqueId, value);\n        } else {\n            localStorage.removeItem('smde_' + this.options.autosave.uniqueId);\n        }\n\n        var el = document.getElementById('autosaved');\n        if (el != null && el != undefined && el != '') {\n            var d = new Date();\n            var dd = new Intl.DateTimeFormat([this.options.autosave.timeFormat.locale, 'en-US'], this.options.autosave.timeFormat.format).format(d);\n            var save = this.options.autosave.text == undefined ? 'Autosaved: ' : this.options.autosave.text;\n\n            el.innerHTML = save + dd;\n        }\n    } else {\n        console.log('EasyMDE: localStorage not available, cannot autosave');\n    }\n};\n\nEasyMDE.prototype.clearAutosavedValue = function () {\n    if (isLocalStorageAvailable()) {\n        if (this.options.autosave == undefined || this.options.autosave.uniqueId == undefined || this.options.autosave.uniqueId == '') {\n            console.log('EasyMDE: You must set a uniqueId to clear the autosave value');\n            return;\n        }\n\n        localStorage.removeItem('smde_' + this.options.autosave.uniqueId);\n    } else {\n        console.log('EasyMDE: localStorage not available, cannot autosave');\n    }\n};\n\n/**\n * Open the browse-file window to upload an image to a server.\n * @param [onSuccess] {function} see EasyMDE.prototype.uploadImage\n * @param [onError] {function} see EasyMDE.prototype.uploadImage\n */\nEasyMDE.prototype.openBrowseFileWindow = function (onSuccess, onError) {\n    var self = this;\n    var imageInput = this.gui.toolbar.getElementsByClassName('imageInput')[0];\n    imageInput.click(); //dispatchEvent(new MouseEvent('click'));  // replaced with click() for IE11 compatibility.\n    function onChange(event) {\n        if (self.options.imageUploadFunction) {\n            self.uploadImagesUsingCustomFunction(self.options.imageUploadFunction, event.target.files);\n        } else {\n            self.uploadImages(event.target.files, onSuccess, onError);\n        }\n        imageInput.removeEventListener('change', onChange);\n    }\n\n    imageInput.addEventListener('change', onChange);\n};\n\n/**\n * Upload an image to the server.\n *\n * @param file {File} The image to upload, as a HTML5 File object (https://developer.mozilla.org/en-US/docs/Web/API/File)\n * @param [onSuccess] {function} A callback function to execute after the image has been successfully uploaded, with one parameter:\n * - url (string): The URL of the uploaded image.\n * @param [onError] {function} A callback function to execute when the image upload fails, with one parameter:\n * - error (string): the detailed error to display to the user (based on messages from options.errorMessages).\n */\nEasyMDE.prototype.uploadImage = function (file, onSuccess, onError) {\n    var self = this;\n    onSuccess = onSuccess || function onSuccess(imageUrl) {\n        afterImageUploaded(self, imageUrl);\n    };\n\n    function onErrorSup(errorMessage) {\n        // show error on status bar and reset after 10000ms\n        self.updateStatusBar('upload-image', errorMessage);\n\n        setTimeout(function () {\n            self.updateStatusBar('upload-image', self.options.imageTexts.sbInit);\n        }, 10000);\n\n        // run custom error handler\n        if (onError && typeof onError === 'function') {\n            onError(errorMessage);\n        }\n        // run error handler from options, this alerts the message.\n        self.options.errorCallback(errorMessage);\n    }\n\n    function fillErrorMessage(errorMessage) {\n        var units = self.options.imageTexts.sizeUnits.split(',');\n        return errorMessage\n            .replace('#image_name#', file.name)\n            .replace('#image_size#', humanFileSize(file.size, units))\n            .replace('#image_max_size#', humanFileSize(self.options.imageMaxSize, units));\n    }\n\n    if (file.size > this.options.imageMaxSize) {\n        onErrorSup(fillErrorMessage(this.options.errorMessages.fileTooLarge));\n        return;\n    }\n\n    var formData = new FormData();\n    formData.append('image', file);\n\n    // insert CSRF body token if provided in config.\n    if (self.options.imageCSRFToken && !self.options.imageCSRFHeader) {\n        formData.append(self.options.imageCSRFName, self.options.imageCSRFToken);\n    }\n\n    var request = new XMLHttpRequest();\n    request.upload.onprogress = function (event) {\n        if (event.lengthComputable) {\n            var progress = '' + Math.round((event.loaded * 100) / event.total);\n            self.updateStatusBar('upload-image', self.options.imageTexts.sbProgress.replace('#file_name#', file.name).replace('#progress#', progress));\n        }\n    };\n    request.open('POST', this.options.imageUploadEndpoint);\n\n    // insert CSRF header token if provided in config.\n    if (self.options.imageCSRFToken && self.options.imageCSRFHeader) {\n        request.setRequestHeader(self.options.imageCSRFName, self.options.imageCSRFToken);\n    }\n\n    request.onload = function () {\n        try {\n            var response = JSON.parse(this.responseText);\n        } catch (error) {\n            console.error('EasyMDE: The server did not return a valid json.');\n            onErrorSup(fillErrorMessage(self.options.errorMessages.importError));\n            return;\n        }\n        if (this.status === 200 && response && !response.error && response.data && response.data.filePath) {\n            onSuccess((self.options.imagePathAbsolute ? '' : (window.location.origin + '/')) + response.data.filePath);\n        } else {\n            if (response.error && response.error in self.options.errorMessages) {  // preformatted error message\n                onErrorSup(fillErrorMessage(self.options.errorMessages[response.error]));\n            } else if (response.error) {  // server side generated error message\n                onErrorSup(fillErrorMessage(response.error));\n            } else {  //unknown error\n                console.error('EasyMDE: Received an unexpected response after uploading the image.'\n                    + this.status + ' (' + this.statusText + ')');\n                onErrorSup(fillErrorMessage(self.options.errorMessages.importError));\n            }\n        }\n    };\n\n    request.onerror = function (event) {\n        console.error('EasyMDE: An unexpected error occurred when trying to upload the image.'\n            + event.target.status + ' (' + event.target.statusText + ')');\n        onErrorSup(self.options.errorMessages.importError);\n    };\n\n    request.send(formData);\n\n};\n\n/**\n * Upload an image to the server using a custom upload function.\n *\n * @param imageUploadFunction {Function} The custom function to upload the image passed in options\n * @param file {File} The image to upload, as a HTML5 File object (https://developer.mozilla.org/en-US/docs/Web/API/File).\n */\nEasyMDE.prototype.uploadImageUsingCustomFunction = function (imageUploadFunction, file) {\n    var self = this;\n\n    function onSuccess(imageUrl) {\n        afterImageUploaded(self, imageUrl);\n    }\n\n    function onError(errorMessage) {\n        var filledErrorMessage = fillErrorMessage(errorMessage);\n        // show error on status bar and reset after 10000ms\n        self.updateStatusBar('upload-image', filledErrorMessage);\n\n        setTimeout(function () {\n            self.updateStatusBar('upload-image', self.options.imageTexts.sbInit);\n        }, 10000);\n\n        // run error handler from options, this alerts the message.\n        self.options.errorCallback(filledErrorMessage);\n    }\n\n    function fillErrorMessage(errorMessage) {\n        var units = self.options.imageTexts.sizeUnits.split(',');\n        return errorMessage\n            .replace('#image_name#', file.name)\n            .replace('#image_size#', humanFileSize(file.size, units))\n            .replace('#image_max_size#', humanFileSize(self.options.imageMaxSize, units));\n    }\n\n    imageUploadFunction.apply(this, [file, onSuccess, onError]);\n};\n\nEasyMDE.prototype.setPreviewMaxHeight = function () {\n    var cm = this.codemirror;\n    var wrapper = cm.getWrapperElement();\n    var preview = wrapper.nextSibling;\n\n    // Calc preview max height\n    var paddingTop = parseInt(window.getComputedStyle(wrapper).paddingTop);\n    var borderTopWidth = parseInt(window.getComputedStyle(wrapper).borderTopWidth);\n    var optionsMaxHeight = parseInt(this.options.maxHeight);\n    var wrapperMaxHeight = optionsMaxHeight + paddingTop * 2 + borderTopWidth * 2;\n    var previewMaxHeight = wrapperMaxHeight.toString() + 'px';\n\n    preview.style.height = previewMaxHeight;\n};\n\nEasyMDE.prototype.createSideBySide = function () {\n    var cm = this.codemirror;\n    var wrapper = cm.getWrapperElement();\n    var preview = wrapper.nextSibling;\n\n    if (!preview || !preview.classList.contains('editor-preview-side')) {\n        preview = document.createElement('div');\n        preview.className = 'editor-preview-side';\n\n        if (this.options.previewClass) {\n\n            if (Array.isArray(this.options.previewClass)) {\n                for (var i = 0; i < this.options.previewClass.length; i++) {\n                    preview.classList.add(this.options.previewClass[i]);\n                }\n\n            } else if (typeof this.options.previewClass === 'string') {\n                preview.classList.add(this.options.previewClass);\n            }\n        }\n\n        wrapper.parentNode.insertBefore(preview, wrapper.nextSibling);\n    }\n\n    if (typeof this.options.maxHeight !== 'undefined') {\n        this.setPreviewMaxHeight();\n    }\n\n    if (this.options.syncSideBySidePreviewScroll === false) return preview;\n    // Syncs scroll  editor -> preview\n    var cScroll = false;\n    var pScroll = false;\n    cm.on('scroll', function (v) {\n        if (cScroll) {\n            cScroll = false;\n            return;\n        }\n        pScroll = true;\n        var height = v.getScrollInfo().height - v.getScrollInfo().clientHeight;\n        var ratio = parseFloat(v.getScrollInfo().top) / height;\n        var move = (preview.scrollHeight - preview.clientHeight) * ratio;\n        preview.scrollTop = move;\n    });\n\n    // Syncs scroll  preview -> editor\n    preview.onscroll = function () {\n        if (pScroll) {\n            pScroll = false;\n            return;\n        }\n        cScroll = true;\n        var height = preview.scrollHeight - preview.clientHeight;\n        var ratio = parseFloat(preview.scrollTop) / height;\n        var move = (cm.getScrollInfo().height - cm.getScrollInfo().clientHeight) * ratio;\n        cm.scrollTo(0, move);\n    };\n    return preview;\n};\n\nEasyMDE.prototype.createToolbar = function (items) {\n    items = items || this.options.toolbar;\n\n    if (!items || items.length === 0) {\n        return;\n    }\n    var i;\n    for (i = 0; i < items.length; i++) {\n        if (toolbarBuiltInButtons[items[i]] != undefined) {\n            items[i] = toolbarBuiltInButtons[items[i]];\n        }\n    }\n\n    var bar = document.createElement('div');\n    bar.className = 'editor-toolbar';\n    bar.setAttribute('role', 'toolbar');\n\n    var self = this;\n\n    var toolbarData = {};\n    self.toolbar = items;\n\n    for (i = 0; i < items.length; i++) {\n        if (items[i].name == 'guide' && self.options.toolbarGuideIcon === false)\n            continue;\n\n        if (self.options.hideIcons && self.options.hideIcons.indexOf(items[i].name) != -1)\n            continue;\n\n        // Fullscreen does not work well on mobile devices (even tablets)\n        // In the future, hopefully this can be resolved\n        if ((items[i].name == 'fullscreen' || items[i].name == 'side-by-side') && isMobile())\n            continue;\n\n\n        // Don't include trailing separators\n        if (items[i] === '|') {\n            var nonSeparatorIconsFollow = false;\n\n            for (var x = (i + 1); x < items.length; x++) {\n                if (items[x] !== '|' && (!self.options.hideIcons || self.options.hideIcons.indexOf(items[x].name) == -1)) {\n                    nonSeparatorIconsFollow = true;\n                }\n            }\n\n            if (!nonSeparatorIconsFollow)\n                continue;\n        }\n\n\n        // Create the icon and append to the toolbar\n        (function (item) {\n            var el;\n            if (item === '|') {\n                el = createSep();\n            } else if (item.children) {\n                el = createToolbarDropdown(item, self.options.toolbarTips, self.options.shortcuts, self);\n            } else {\n                el = createToolbarButton(item, true, self.options.toolbarTips, self.options.shortcuts, 'button', self);\n            }\n\n\n            toolbarData[item.name || item] = el;\n            bar.appendChild(el);\n\n            // Create the input element (ie. <input type='file'>), used among\n            // with the 'import-image' icon to open the browse-file window.\n            if (item.name === 'upload-image') {\n                var imageInput = document.createElement('input');\n                imageInput.className = 'imageInput';\n                imageInput.type = 'file';\n                imageInput.multiple = true;\n                imageInput.name = 'image';\n                imageInput.accept = self.options.imageAccept;\n                imageInput.style.display = 'none';\n                imageInput.style.opacity = 0;\n                bar.appendChild(imageInput);\n            }\n        })(items[i]);\n    }\n\n    self.toolbar_div = bar;\n    self.toolbarElements = toolbarData;\n\n    var cm = this.codemirror;\n    cm.on('cursorActivity', function () {\n        var stat = getState(cm);\n\n        for (var key in toolbarData) {\n            (function (key) {\n                var el = toolbarData[key];\n                if (stat[key]) {\n                    el.classList.add('active');\n                } else if (key != 'fullscreen' && key != 'side-by-side') {\n                    el.classList.remove('active');\n                }\n            })(key);\n        }\n    });\n\n    var cmWrapper = cm.getWrapperElement();\n    cmWrapper.parentNode.insertBefore(bar, cmWrapper);\n    return bar;\n};\n\nEasyMDE.prototype.createStatusbar = function (status) {\n    // Initialize\n    status = status || this.options.status;\n    var options = this.options;\n    var cm = this.codemirror;\n\n    // Make sure the status variable is valid\n    if (!status || status.length === 0) {\n        return;\n    }\n\n    // Set up the built-in items\n    var items = [];\n    var i, onUpdate, onActivity, defaultValue;\n\n    for (i = 0; i < status.length; i++) {\n        // Reset some values\n        onUpdate = undefined;\n        onActivity = undefined;\n        defaultValue = undefined;\n\n\n        // Handle if custom or not\n        if (typeof status[i] === 'object') {\n            items.push({\n                className: status[i].className,\n                defaultValue: status[i].defaultValue,\n                onUpdate: status[i].onUpdate,\n                onActivity: status[i].onActivity,\n            });\n        } else {\n            var name = status[i];\n\n            if (name === 'words') {\n                defaultValue = function (el) {\n                    el.innerHTML = wordCount(cm.getValue());\n                };\n                onUpdate = function (el) {\n                    el.innerHTML = wordCount(cm.getValue());\n                };\n            } else if (name === 'lines') {\n                defaultValue = function (el) {\n                    el.innerHTML = cm.lineCount();\n                };\n                onUpdate = function (el) {\n                    el.innerHTML = cm.lineCount();\n                };\n            } else if (name === 'cursor') {\n                defaultValue = function (el) {\n                    el.innerHTML = '1:1';\n                };\n                onActivity = function (el) {\n                    var pos = cm.getCursor();\n                    var posLine = pos.line + 1;\n                    var posColumn = pos.ch + 1;\n                    el.innerHTML = posLine + ':' + posColumn;\n                };\n            } else if (name === 'autosave') {\n                defaultValue = function (el) {\n                    if (options.autosave != undefined && options.autosave.enabled === true) {\n                        el.setAttribute('id', 'autosaved');\n                    }\n                };\n            } else if (name === 'upload-image') {\n                defaultValue = function (el) {\n                    el.innerHTML = options.imageTexts.sbInit;\n                };\n            }\n\n            items.push({\n                className: name,\n                defaultValue: defaultValue,\n                onUpdate: onUpdate,\n                onActivity: onActivity,\n            });\n        }\n    }\n\n\n    // Create element for the status bar\n    var bar = document.createElement('div');\n    bar.className = 'editor-statusbar';\n\n\n    // Create a new span for each item\n    for (i = 0; i < items.length; i++) {\n        // Store in temporary variable\n        var item = items[i];\n\n\n        // Create span element\n        var el = document.createElement('span');\n        el.className = item.className;\n\n\n        // Ensure the defaultValue is a function\n        if (typeof item.defaultValue === 'function') {\n            item.defaultValue(el);\n        }\n\n\n        // Ensure the onUpdate is a function\n        if (typeof item.onUpdate === 'function') {\n            // Create a closure around the span of the current action, then execute the onUpdate handler\n            this.codemirror.on('update', (function (el, item) {\n                return function () {\n                    item.onUpdate(el);\n                };\n            }(el, item)));\n        }\n        if (typeof item.onActivity === 'function') {\n            // Create a closure around the span of the current action, then execute the onActivity handler\n            this.codemirror.on('cursorActivity', (function (el, item) {\n                return function () {\n                    item.onActivity(el);\n                };\n            }(el, item)));\n        }\n\n\n        // Append the item to the status bar\n        bar.appendChild(el);\n    }\n\n\n    // Insert the status bar into the DOM\n    var cmWrapper = this.codemirror.getWrapperElement();\n    cmWrapper.parentNode.insertBefore(bar, cmWrapper.nextSibling);\n    return bar;\n};\n\n/**\n * Get or set the text content.\n */\nEasyMDE.prototype.value = function (val) {\n    var cm = this.codemirror;\n    if (val === undefined) {\n        return cm.getValue();\n    } else {\n        cm.getDoc().setValue(val);\n        if (this.isPreviewActive()) {\n            var wrapper = cm.getWrapperElement();\n            var preview = wrapper.lastChild;\n            var preview_result = this.options.previewRender(val, preview);\n            if (preview_result !== null) {\n                preview.innerHTML = preview_result;\n            }\n\n        }\n        return this;\n    }\n};\n\n\n/**\n * Bind static methods for exports.\n */\nEasyMDE.toggleBold = toggleBold;\nEasyMDE.toggleItalic = toggleItalic;\nEasyMDE.toggleStrikethrough = toggleStrikethrough;\nEasyMDE.toggleBlockquote = toggleBlockquote;\nEasyMDE.toggleHeadingSmaller = toggleHeadingSmaller;\nEasyMDE.toggleHeadingBigger = toggleHeadingBigger;\nEasyMDE.toggleHeading1 = toggleHeading1;\nEasyMDE.toggleHeading2 = toggleHeading2;\nEasyMDE.toggleHeading3 = toggleHeading3;\nEasyMDE.toggleHeading4 = toggleHeading4;\nEasyMDE.toggleHeading5 = toggleHeading5;\nEasyMDE.toggleHeading6 = toggleHeading6;\nEasyMDE.toggleCodeBlock = toggleCodeBlock;\nEasyMDE.toggleUnorderedList = toggleUnorderedList;\nEasyMDE.toggleOrderedList = toggleOrderedList;\nEasyMDE.cleanBlock = cleanBlock;\nEasyMDE.drawLink = drawLink;\nEasyMDE.drawImage = drawImage;\nEasyMDE.drawUploadedImage = drawUploadedImage;\nEasyMDE.drawTable = drawTable;\nEasyMDE.drawHorizontalRule = drawHorizontalRule;\nEasyMDE.undo = undo;\nEasyMDE.redo = redo;\nEasyMDE.togglePreview = togglePreview;\nEasyMDE.toggleSideBySide = toggleSideBySide;\nEasyMDE.toggleFullScreen = toggleFullScreen;\n\n/**\n * Bind instance methods for exports.\n */\nEasyMDE.prototype.toggleBold = function () {\n    toggleBold(this);\n};\nEasyMDE.prototype.toggleItalic = function () {\n    toggleItalic(this);\n};\nEasyMDE.prototype.toggleStrikethrough = function () {\n    toggleStrikethrough(this);\n};\nEasyMDE.prototype.toggleBlockquote = function () {\n    toggleBlockquote(this);\n};\nEasyMDE.prototype.toggleHeadingSmaller = function () {\n    toggleHeadingSmaller(this);\n};\nEasyMDE.prototype.toggleHeadingBigger = function () {\n    toggleHeadingBigger(this);\n};\nEasyMDE.prototype.toggleHeading1 = function () {\n    toggleHeading1(this);\n};\nEasyMDE.prototype.toggleHeading2 = function () {\n    toggleHeading2(this);\n};\nEasyMDE.prototype.toggleHeading3 = function () {\n    toggleHeading3(this);\n};\nEasyMDE.prototype.toggleHeading4 = function () {\n    toggleHeading4(this);\n};\nEasyMDE.prototype.toggleHeading5 = function () {\n    toggleHeading5(this);\n};\nEasyMDE.prototype.toggleHeading6 = function () {\n    toggleHeading6(this);\n};\nEasyMDE.prototype.toggleCodeBlock = function () {\n    toggleCodeBlock(this);\n};\nEasyMDE.prototype.toggleUnorderedList = function () {\n    toggleUnorderedList(this);\n};\nEasyMDE.prototype.toggleOrderedList = function () {\n    toggleOrderedList(this);\n};\nEasyMDE.prototype.cleanBlock = function () {\n    cleanBlock(this);\n};\nEasyMDE.prototype.drawLink = function () {\n    drawLink(this);\n};\nEasyMDE.prototype.drawImage = function () {\n    drawImage(this);\n};\nEasyMDE.prototype.drawUploadedImage = function () {\n    drawUploadedImage(this);\n};\nEasyMDE.prototype.drawTable = function () {\n    drawTable(this);\n};\nEasyMDE.prototype.drawHorizontalRule = function () {\n    drawHorizontalRule(this);\n};\nEasyMDE.prototype.undo = function () {\n    undo(this);\n};\nEasyMDE.prototype.redo = function () {\n    redo(this);\n};\nEasyMDE.prototype.togglePreview = function () {\n    togglePreview(this);\n};\nEasyMDE.prototype.toggleSideBySide = function () {\n    toggleSideBySide(this);\n};\nEasyMDE.prototype.toggleFullScreen = function () {\n    toggleFullScreen(this);\n};\n\nEasyMDE.prototype.isPreviewActive = function () {\n    var cm = this.codemirror;\n    var wrapper = cm.getWrapperElement();\n    var preview = wrapper.lastChild;\n\n    return preview.classList.contains('editor-preview-active');\n};\n\nEasyMDE.prototype.isSideBySideActive = function () {\n    var cm = this.codemirror;\n    var wrapper = cm.getWrapperElement();\n    var preview = wrapper.nextSibling;\n\n    return preview.classList.contains('editor-preview-active-side');\n};\n\nEasyMDE.prototype.isFullscreenActive = function () {\n    var cm = this.codemirror;\n\n    return cm.getOption('fullScreen');\n};\n\nEasyMDE.prototype.getState = function () {\n    var cm = this.codemirror;\n\n    return getState(cm);\n};\n\nEasyMDE.prototype.toTextArea = function () {\n    var cm = this.codemirror;\n    var wrapper = cm.getWrapperElement();\n    var easyMDEContainer = wrapper.parentNode;\n\n    if (easyMDEContainer) {\n        if (this.gui.toolbar) {\n            easyMDEContainer.removeChild(this.gui.toolbar);\n        }\n        if (this.gui.statusbar) {\n            easyMDEContainer.removeChild(this.gui.statusbar);\n        }\n        if (this.gui.sideBySide) {\n            easyMDEContainer.removeChild(this.gui.sideBySide);\n        }\n    }\n\n    // Unwrap easyMDEcontainer before codemirror toTextArea() call\n    easyMDEContainer.parentNode.insertBefore(wrapper, easyMDEContainer);\n    easyMDEContainer.remove();\n\n    cm.toTextArea();\n\n    if (this.autosaveTimeoutId) {\n        clearTimeout(this.autosaveTimeoutId);\n        this.autosaveTimeoutId = undefined;\n        this.clearAutosavedValue();\n    }\n};\n\nmodule.exports = EasyMDE;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/easymde/src/js/easymde.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/easymde/dist/easymde.min.css":
/*!***************************************************!*\
  !*** ./node_modules/easymde/dist/easymde.min.css ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (\"17bd888c94c1\");\nif (false) {}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZWFzeW1kZS9kaXN0L2Vhc3ltZGUubWluLmNzcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsaUVBQWUsY0FBYztBQUM3QixJQUFJLEtBQVUsRUFBRSxFQUF1QiIsInNvdXJjZXMiOlsid2VicGFjazovL25leHQtYXBwLy4vbm9kZV9tb2R1bGVzL2Vhc3ltZGUvZGlzdC9lYXN5bWRlLm1pbi5jc3M/NDE5YyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBcIjE3YmQ4ODhjOTRjMVwiXG5pZiAobW9kdWxlLmhvdCkgeyBtb2R1bGUuaG90LmFjY2VwdCgpIH1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/easymde/dist/easymde.min.css\n");

/***/ })

};
;